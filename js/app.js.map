{"version":3,"sources":["app.js","routes.js","toaster.js","controllers/activationsCtrl.js","controllers/authCtrl.js","controllers/dashboardCtrl.js","controllers/logsCtrl.js","controllers/membersCtrl.js","controllers/ordersCtrl.js","controllers/reportingCtrl.js","controllers/versionsCtrl.js","directives/navbar.js","directives/tabset.js","filters/timeMathFltr.js","providers/data.js","providers/graphs.js","providers/memberFuncs.js","providers/orderFuncs.js","providers/versionFuncs.js","controllers/sub/appVersionViewCtrl.js","controllers/sub/appViewCtrl.js","controllers/sub/gameVersionViewCtrl.js","controllers/sub/graphViewCtrl.js","controllers/sub/memberViewCtrl.js","controllers/sub/orderViewCtrl.js","controllers/sub/unknownVersionViewCtrl.js","directives/forms/confirm.js","directives/graphs/graphs.js","directives/tables/activationsTable.js","directives/tables/appsTable.js","directives/tables/logsCIDTable.js","directives/tables/logsDeactTable.js","directives/tables/logsFailureTable.js","directives/tables/logsSystemTable.js","directives/tables/membersTable.js","directives/tables/ordersTable.js","directives/tables/versionsAppTable.js","directives/tables/versionsGameTable.js","directives/tables/versionsUnknownTable.js","directives/tables/buttons/threeButtonBar.js","directives/tables/buttons/twoButtonBar.js"],"names":["angular","module","run","$http","$httpParamSerializerJQLike","defaults","transformRequest","unshift","config","$httpProvider","withCredentials","$rootScope","$location","Data","$on","event","next","current","authenticated","get","then","results","uid","name","email","appList","JSON","parse","splice","id","title","nums","tweets","num_tweets","feedback","num_feedback","logs","num_logs","logout","console","log","path","$$route","originalPath","nextUrl","$routeProvider","$locationProvider","when","templateUrl","controller","reloadOnSearch","role","otherwise","redirectTo","service","this","pop","type","body","timeout","bodyOutputType","toast","$broadcast","popSimple","clear","constant","limit","tap-to-dismiss","newest-on-top","time-out","icon-classes","error","info","success","warning","body-output-type","body-template","icon-class","position-class","title-class","message-class","directive","$compile","$timeout","$sce","toasterConfig","toaster","replace","restrict","link","scope","elm","attrs","addToast","mergedConfig","extend","html","trustAsHtml","bodyTemplate","configureTimer","toasters","length","push","shift","setTimeout","time","removeToast","toasterOptions","$eval","position","message","tap","$scope","$element","$attrs","stopTimer","cancel","restartTimer","i","remove","template","Graphs","$routeParams","login","signup","doLogin","form","post","password","phone","address","signUp","customer","status","$uibModal","memberFuncs","orderFuncs","orders","total","getRecentOrders","orderID","totalOrders","getAppName","openOrder","viewOrder","graphs","getGraphs","viewGraph","String","prototype","start","delCount","newSubStr","slice","Math","abs","isActive","viewLocation","indexOf","controllerAs","transclude","tabsType","element","tabsetController","tabs","currentTab","search","selectTab","tab","forEach","selected","$parent","selectedTab","toLowerCase","setTabTemplate","addTab","location","require","select","$watch","filter","Date","constructor","getTime","time_formats","seconds","token","list_choice","format","floor","input","factory","serviceBase","timestamp","obj","data","stringify","server","get_params","post_params","toastMsg","state","msg","q","object","method","headers","Content-Type","url","e","taskID","code","put","graph_ids","getSingle","graph","graph_desc","desc","graphURL","graphLabel","open","animation","size","resolve","params","viewMember","memberID","members","columns","len","member_id","member_email","modalInstance","windowClass","member","rendered","result","$","css","window","height","action","resendConfirmationEmail","viaIDtype","viaID","viaIDType","regenerateKey","setDeactivated","value","order_id","business","order","hash_id","viewAppVersion","versions","app_list","hash_string","appVersion","updateObject","updateID","versionType","viewGameVersion","game_id","vers_bytes","gameVersion","viewUnknownVersion","unknownVersion","$uibModalInstance","resize","autoExpand","appVersion_original","Object","create","newappVersion","saveLabel","saveAction","toggleActLabel","added_by","copy","active","save","close","toggleAct","booleanActive","dismiss","reason","closed","confirm","preventDefault","target","document","getElementById","style","scrollHeight","revertForm","myForm","$setPristine","onShow","app","appID","available_engines","newApp","gameVersion_original","newgameVersion","is_supported","should_update","should_redirect","getAccountDetails","relatedOrders","count","act","CID","expiryDt","member_details","expiry","deactivated","blacklisted","comments","myComments","isDeactivated","newLabel","activatedAction","blacklistedAction","deactivatedMsg","blacklistedMsg","resendConfirmation","member_act_key","new_key","getUserDetails","expiry_date","isBlacklisted","toggleActivation","revertNotes","saveNotes","member_comments","shouldConfirm","payer_email","license","unknownVersion_original","newunknownVersion","register","alert","priority","pre","bind","stopImmediatePropagation","graphKeys","wrap","contentUrl","key","attr","debug","time_taken","shouldWrap","fullscreen","$this","currentTarget","getElementsByTagName","classList","thumb","closest","contains","add","chart","legend","$emit","options","pointDotRadius","scaleBeginAtZero","d","dispatchEvent","Event","onClick","points","evt","NgTableParams","$filter","activations","self","filters","app_id","dt","ip","request_location","version_tool","version_payload","activation_status","prepareTooltips","tooltip","queryStrings","pagination","currentPage","perPage","page","n","updateParamsPage","updateParamsCount","updateParamsFilters","param","hasOwnProperty","tableParams","sorting","filterSwitch","filterOptions","filterDelay","getData","$defer","offset","isFiltered","filtered","filteredData","getApplications","apps","totalApps","temp","openApp","resultData","originalData","item","newAppDetails","tableAlias","actionTypes","syskey","IP","actcode","new","actions","member_name","last_purchase","filterDeactivated","reload","filterBlacklisted","filterReset","isExpired","expDate","todayDate","activation_count","extension_count","openMember","ordesadfrFuncs","orderTypes","getOrderTypes","last_name","item_name","versionFuncs","viewVersion","version","tool_or_payload","date_added","game_version","game_name","vers_string","not_supported_text","should_update_text","should_update_URL","game_vers_comments","game","last_use_attempt","use_count","submitter_email","unknown","showFilter","markAsRead","myTableAlias"],"mappings":"CAAA,WACAA,QAAAC,OAAA,YAAA,SAAA,OAAA,SAAA,kBAAA,WAAA,aAAA,SAAA,cAAA,cAAA,eAAA,kBAAA,mBAAA,WAAA,eAAA,gBAAA,kBAEAC,KAAA,QAAA,6BAAA,SAAAC,EAAAC,GACAD,EAAAE,SAAAC,iBAAAC,QAAAH,MAGAI,QAAA,gBAAA,SAAAC,GAEAA,EAAAJ,SAAAK,iBAAA,KAIAR,KAAA,aAAA,YAAA,OAAA,SAAAS,EAAAC,EAAAC,GACAF,EAAAG,IAAA,oBAAA,SAAAC,EAAAC,EAAAC,GACAN,EAAAO,eAAA,EACAL,EAAAM,IAAA,mBAAAC,KAAA,SAAAC,GACA,GAAAA,EAAAC,IACAX,EAAAO,eAAA,EACAP,EAAAW,IAAAD,EAAAC,IACAX,EAAAY,KAAAF,EAAAE,KACAZ,EAAAa,MAAAH,EAAAG,MAEAb,EAAAc,QAAAC,KAAAC,MAAAN,EAAAI,SACAd,EAAAc,QAAAG,OAAA,EAAA,GACAC,GAAA,GAAAC,MAAA,KAGAnB,EAAAoB,MACAC,OAAAX,EAAAY,WACAC,SAAAb,EAAAc,aACAC,KAAAf,EAAAgB,UAGA1B,EAAA2B,OAAA,WAEAC,QAAAC,IAAA,UACA3B,EAAAM,IAAA,UAAAC,KAAA,SAAAC,GAEAT,EAAA6B,KAAA,aAKAzB,EAAA0B,SAAA,KAAA1B,EAAA0B,QAAAC,cACA/B,EAAA6B,KAAA,kBAEA,CACA,GAAAG,GAAA5B,EAAA0B,QAAAC,YACA,YAAAC,GAAA,UAAAA,GAGAhC,EAAA6B,KAAA,qBCpDA,WACAzC,QAAAC,OAAA,UAAA,UAAA,kBAEAO,QAAA,iBAAA,oBAAA,SAAAqC,EAAAC,GACAD,EACAE,KAAA,UACAjB,MAAA,QACAkB,YAAA,4BACAC,WAAA,aAEAF,KAAA,WAAAjB,MAAA,SAAAkB,YAAA,4BAAAC,WAAA,aACAF,KAAA,WAAAjB,MAAA,SAAAkB,YAAA,6BAAAC,WAAA,aACAF,KAAA,cAAAjB,MAAA,YAAAkB,YAAA,gCAAAC,WAAA,kBACAF,KAAA,aAAAjB,MAAA,WAAAkB,YAAA,+BAAAC,WAAA,eAAAC,gBAAA,IACAH,KAAA,uBAAAjB,MAAA,oBAAAkB,YAAA,gCAAAC,WAAA,gBAAAC,gBAAA,IACAH,KAAA,YAAAjB,MAAA,SAAAkB,YAAA,6BAAAC,WAAA,aAAAC,gBAAA,IACAH,KAAA,YAAAjB,MAAA,UAAAkB,YAAA,8BAAAC,WAAA,cAAAC,gBAAA,IACAH,KAAA,gBAAAjB,MAAA,cAAAkB,YAAA,kCAAAC,WAAA,kBAAAC,gBAAA,IAGAH,KAAA,SAAAjB,MAAA,OAAAkB,YAAA,2BAAAC,WAAA,WAAAC,gBAAA,IACAH,KAAA,KAAAjB,MAAA,UAAAkB,YAAA,8BAAAC,WAAA,WAAAE,KAAA,MAEAC,WACAC,WAAA,YCTArD,QAAAC,OAAA,WAAA,cACAqD,QAAA,WAAA,aAAA,SAAA3C,GACA4C,KAAAC,IAAA,SAAAC,EAAA3B,EAAA4B,EAAAC,EAAAC,GACAL,KAAAM,OACAJ,KAAAA,EACA3B,MAAAA,EACA4B,KAAAA,EACAC,QAAAA,EACAC,eAAAA,GAEAjD,EAAAmD,WAAA,qBAEAP,KAAAQ,UAAA,SAAAN,EAAA3B,EAAA4B,EAAAC,GACAJ,KAAAC,IAAAC,EAAA3B,EAAA4B,EAAAC,EAAA,gBAGAJ,KAAAS,MAAA,WACArD,EAAAmD,WAAA,2BAGAG,SAAA,iBACAC,MAAA,EACAC,kBAAA,EACAC,iBAAA,EAMAC,WAAA,IACAC,gBACAC,MAAA,cACAC,KAAA,aACAC,QAAA,gBACAC,QAAA,iBAEAC,mBAAA,GACAC,gBAAA,uBACAC,aAAA,aACAC,iBAAA,kBACAC,cAAA,cACAC,gBAAA,kBAEAC,UAAA,oBAAA,WAAA,WAAA,OAAA,gBAAA,UACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OACAC,SAAA,EACAC,SAAA,KACAC,KAAA,SAAAC,EAAAC,EAAAC,GAsBA,QAAAC,GAAAhC,GAUA,OATAA,EAAAJ,KAAAqC,EAAA,gBAAAjC,EAAAJ,MACAI,EAAAJ,OACAI,EAAAJ,KAAAqC,EAAA,eAEAjE,IACA7B,QAAA+F,OAAAlC,GAAAhC,GAAAA,IAGAgC,EAAAD,eAAAC,EAAAD,gBAAAkC,EAAA,oBACAjC,EAAAD,gBACA,IAAA,cACAC,EAAAmC,KAAAZ,EAAAa,YAAApC,EAAAH,KACA,MACA,KAAA,WACAG,EAAAqC,aAAArC,EAAAH,MAAAoC,EAAA,iBAIAJ,EAAAS,eAAAtC,GAEAiC,EAAA,oBAAA,GACAJ,EAAAU,SAAA7F,QAAAsD,GACAiC,EAAA,MAAA,GAAAJ,EAAAU,SAAAC,OAAAP,EAAA,OACAJ,EAAAU,SAAA5C,QAGAkC,EAAAU,SAAAE,KAAAzC,GACAiC,EAAA,MAAA,GAAAJ,EAAAU,SAAAC,OAAAP,EAAA,OACAJ,EAAAU,SAAAG,SAKA,QAAAC,GAAA3C,EAAA4C,GACA5C,EAAAF,QAAAwB,EAAA,WACAO,EAAAgB,YAAA7C,EAAAhC,KACA4E,GAzDA,GAAA5E,GAAA,EAEAiE,EAAAT,CACAO,GAAAe,gBACA3G,QAAA+F,OAAAD,EAAAJ,EAAAkB,MAAAhB,EAAAe,iBAGAjB,EAAAlF,QACAqG,SAAAf,EAAA,kBACAhE,MAAAgE,EAAA,eACAgB,QAAAhB,EAAA,iBACAiB,IAAAjB,EAAA,mBAGAJ,EAAAS,eAAA,SAAAtC,GACA,GAAAF,GAAA,gBAAAE,GAAA,QAAAA,EAAAF,QAAAmC,EAAA,WACAnC,GAAA,GACA6C,EAAA3C,EAAAF,IA2CA+B,EAAAU,YACAV,EAAA5E,IAAA,mBAAA,WACA+E,EAAAP,EAAAzB,SAGA6B,EAAA5E,IAAA,sBAAA,WACA4E,EAAAU,SAAAxE,OAAA,EAAA8D,EAAAU,SAAAC,WAGApD,YAAA,SAAA,WAAA,SAAA,SAAA+D,EAAAC,EAAAC,GAEAF,EAAAG,UAAA,SAAAtD,GACAA,EAAAF,UACAwB,EAAAiC,OAAAvD,EAAAF,SACAE,EAAAF,QAAA,OAIAqD,EAAAK,aAAA,SAAAxD,GACAA,EAAAF,SACAqD,EAAAb,eAAAtC,IAGAmD,EAAAN,YAAA,SAAA7E,GACA,GAAAyF,GAAA,CACA,KAAAA,EAAAA,EAAAN,EAAAZ,SAAAC,QACAW,EAAAZ,SAAAkB,GAAAzF,KAAAA,EADAyF,KAIAN,EAAAZ,SAAAxE,OAAA0F,EAAA,IAGAN,EAAAO,OAAA,SAAA1F,GACAmF,EAAAxG,OAAAuG,OAAA,GACAC,EAAAN,YAAA7E,MAIA2F,SACA,4jBCpKAxH,QAAAC,OAAA,sBACAgD,WAAA,mBAAA,SAAA,SAAA,SAAA+D,EAAAS,OCDAzH,QAAAC,OAAA,eACAgD,WAAA,YAAA,SAAA,aAAA,eAAA,YAAA,QAAA,OAAA,SAAA+D,EAAArG,EAAA+G,EAAA9G,EAAAT,EAAAU,GAEAmG,EAAAW,SACAX,EAAAY,UACAZ,EAAAa,QAAA,SAAAC,GAEAjH,EAAAkH,KAAA,SACAD,KAAAA,IACA1G,KAAA,SAAAC,GAEAT,EAAA6B,KAAA,gBAGAuE,EAAAY,QAAApG,MAAA,GAAAwG,SAAA,GAAAzG,KAAA,GAAA0G,MAAA,GAAAC,QAAA,IACAlB,EAAAmB,OAAA,SAAAC,GACAvH,EAAAkH,KAAA,UACAK,SAAAA,IACAhH,KAAA,SAAAC,GAEA,WAAAA,EAAAgH,OACAzH,EAAA6B,KAAA,QAGA6C,QAAAvB,UAAA,QAAA,QAAA,GAAA1C,EAAAyF,QAAA,WAAA,WCxBA9G,QAAAC,OAAA,iBAAA,eAAA,YAAA,gBAAA,cAAA,eACAgD,WAAA,iBAAA,SAAA,aAAA,eAAA,YAAA,QAAA,OAAA,SAAA,YAAA,cAAA,aAAA,SAAA+D,EAAArG,EAAA+G,EAAA9G,EAAAT,EAAAU,EAAA4G,EAAAa,EAAAC,EAAAC,GAIAxB,EAAAyB,UACAzB,EAAA0B,SAEA1B,EAAA2B,gBAAA,SAAAC,GACA/H,EAAAkH,KAAA,mBACAa,QAAAA,IACAxH,KAAA,SAAAC,GACA2F,EAAAyB,OAAA/G,KAAAC,MAAAN,EAAAyF,SACAE,EAAA6B,YAAAxH,EAAAqH,SAIA1B,EAAAvF,QAAA,WACA,MAAAd,GAAAc,SAEAuF,EAAA8B,WAAA,SAAAF,GACA,MAAA5B,GAAAvF,UACAuF,EAAAvF,UAAAmH,GAAA9G,MAGA,IAGAkF,EAAA+B,UAAA,SAAAH,GACAJ,EAAAQ,UAAAJ,EAAA5B,EAAAyB,YC7BAzI,QAAAC,OAAA,YAAA,eAAA,kBAAA,mBAAA,iBAAA,eAAA,mBACAgD,WAAA,YAAA,SAAA,SAAA,SAAA+D,EAAAS,OCDAzH,QAAAC,OAAA,kBACAgD,WAAA,eAAA,SAAA,SAAA,SAAA+D,EAAAS,GACAT,EAAAiC,UAEAjC,EAAAkC,UAAA,SAAAD,GACAxB,EAAAtG,IAAA8H,GAAA7H,KAAA,SAAAC,GACA2F,EAAAiC,OAAA5H,KAIA2F,EAAAmC,UAAA1B,EAAA0B,aCVAnJ,QAAAC,OAAA,iBACAgD,WAAA,cAAA,SAAA,SAAA,SAAA+D,EAAAS,GACAT,EAAAiC,UAEAjC,EAAAkC,UAAA,SAAAD,GACAxB,EAAAtG,IAAA8H,GAAA7H,KAAA,SAAAC,GACA2F,EAAAiC,OAAA5H,KAIA2F,EAAAmC,UAAA1B,EAAA0B,aCVAnJ,QAAAC,OAAA,iBAAA,eAAA,eAAA,mBAAA,aACAgD,WAAA,iBAAA,SAAA,aAAA,eAAA,YAAA,QAAA,OAAA,SAAA,WAAA,SAAA+D,EAAArG,EAAA+G,EAAA9G,EAAAT,EAAAU,EAAA4G,EAAAtC,GAGAiE,OAAAC,UAAAzH,SAaAwH,OAAAC,UAAAzH,OAAA,SAAA0H,EAAAC,EAAAC,GACA,MAAAjG,MAAAkG,MAAA,EAAAH,GAAAE,EAAAjG,KAAAkG,MAAAH,EAAAI,KAAAC,IAAAJ,SClBAvJ,QAAAC,OAAA,gBAAA,eAAA,eAAA,mBAAA,oBAAA,yBACAgD,WAAA,gBAAA,SAAA,aAAA,eAAA,YAAA,QAAA,OAAA,SAAA,SAAA+D,EAAArG,EAAA+G,EAAA9G,EAAAT,EAAAU,EAAA4G,GACAT,EAAAiC,UAEAjC,EAAAkC,UAAA,SAAAD,GACAxB,EAAAtG,IAAA8H,GAAA7H,KAAA,SAAAC,GACA2F,EAAAiC,OAAA5H,KAKA2F,EAAAmC,UAAA1B,EAAA0B,aCXA,WACAnJ,QAAAC,OAAA,aAEAgF,UAAA,eAAA,WACA,OACAO,SAAA,IACAxC,YAAA,8BACAC,YAAA,SAAA,YAAA,SAAA+D,EAAApG,GACAoG,EAAA4C,SAAA,SAAAC,GAEA,MAAA,IAAAjJ,EAAA6B,OAAAqH,QAAAD,MAGAE,aAAA,mBCbA,WACA,YAEA/J,SAAAC,OAAA,uBACAgF,UAAA,SAAA,WACA,OACAO,SAAA,IACAD,SAAA,EACAyE,YAAA,EACAtE,OACAuE,SAAA,KAEAxE,KAAA,SAAAC,EAAAwE,EAAAtE,EAAAuE,GACAzE,EAAAuE,SAAArE,EAAAqE,UAEAhH,YAAA,SAAA,YAAA,eAAA,SAAA,SAAA+D,EAAApG,EAAA8G,EAAAD,GACAT,EAAAhE,YAAA,EACA,IAAAoH,GAAApD,EAAAoD,QACAnH,EAAAM,KAEA8G,EAAAzJ,EAAA0J,SAAAtD,EAAAiD,SAEA1G,MAAAgH,UAAA,SAAAC,GACAxK,QAAAyK,QAAAL,EAAA,SAAAI,GAEAA,EAAAE,UAAA,IAEAF,EAAAE,UAAA,EACAF,EAAAG,QAAAA,QAAAC,YAAAJ,EAAA1I,MAAA+I,eAIAtH,KAAAuH,eAAA,SAAA9H,GACAgE,EAAAhE,YAAAA,GAGAO,KAAAwH,OAAA,SAAAP,GACA,GAAAJ,EAAA/D,QACApD,EAAAsH,UAAAC,GAEAJ,EAAA9D,KAAAkE,GACAH,GAAAG,EAAA1I,MAAA+I,gBAAAR,GACApH,EAAAsH,UAAAC,IAGAxD,EAAAmC,UAAA1B,EAAA0B,YAEA3B,SACA,sLAUAvC,UAAA,OAAA,YAAA,SAAA+F,GACA,OACAxF,SAAA,IACAD,SAAA,EACA0F,QAAA,UACAvF,OACA5D,MAAA,IACAkB,YAAA,KAEAyC,KAAA,SAAAC,EAAAwE,EAAAtE,EAAAuE,GACAA,EAAAY,OAAArF,GAEAA,EAAAwF,OAAA,WAEAxF,EAAAiF,QAAAA,QAAAV,UACAe,EAAAV,OAAA5E,EAAAiF,QAAAA,QAAAV,SAAAvE,EAAA5D,MAAA+I,eAEAV,EAAAI,UAAA7E,IAGAA,EAAAyF,OAAA,WAAA,WACAzF,EAAAgF,UACAP,EAAAW,eAAApF,EAAA1C,gBAIAwE,SACA,+FCrFA,WACAxH,QAAAC,OAAA,mBAEAmL,OAAA,YAAA,WACA,MAAA,UAAA3E,GACA,aAAAA,IACA,IAAA,SAAA,KACA,KAAA,SACAA,GAAA,GAAA4E,MAAA5E,EAAAlB,QAAA,KAAA,MACAkB,GAAA,GAAA4E,MAAA5E,EACA,MACA,KAAA,SAAAA,EAAA6E,cAAAD,OAAA5E,EAAAA,EAAA8E,UAAA,MACA,SAAA9E,GAAA,GAAA4E,MAEA,GAAAG,KACA,GAAA,UAAA,IACA,IAAA,eAAA,sBACA,KAAA,UAAA,KACA,KAAA,aAAA,oBACA,MAAA,QAAA,OACA,OAAA,YAAA,aACA,OAAA,OAAA,QACA,QAAA,YAAA,cACA,QAAA,QAAA,SACA,QAAA,aAAA,eACA,SAAA,SAAA,UACA,SAAA,YAAA,cACA,SAAA,QAAA,WACA,SAAA,eAAA,iBACA,SAAA,YAAA,WAEAC,IAAA,GAAAJ,MAAA5E,GAAA,IACAiF,EAAA,MAAAC,EAAA,CAEA,IAAA,GAAAF,EACA,MAAA,UAEA,GAAAA,IACAA,EAAA/B,KAAAC,IAAA8B,GACAC,EAAA,WACAC,EAAA,EAGA,KADA,GAAAC,GAAAtE,EAAA,EACAsE,EAAAJ,EAAAlE,MACA,GAAAmE,EAAAG,EAAA,GACA,MAAA,gBAAAA,GAAA,GACAA,EAAAD,GAEAjC,KAAAmC,MAAAJ,EAAAG,EAAA,IAAA,IAAAA,EAAA,GAAA,IAAAF,CAEA,OAAAjF,MAIA2E,OAAA,UAAA,WACA,MAAA,UAAAU,GACA,MAAA,IAAAT,MAAAS,SCxDA,WACA9L,QAAAC,OAAA,QAAA,YAEA8L,QAAA,QAAA,QAAA,UACA,SAAA5L,EAAAmF,GAEA,GAAA0G,GAAA,OAEAC,GAAA,GAAAZ,OAAAE,SACAU,GAAA,OAAAA,CAEA,IAAAC,KAgEA,OA/DAA,GAAArI,MAAA,SAAAsI,GACA7G,EAAA9B,IAAA2I,EAAA9D,OAAA,GAAA8D,EAAArF,QAAA,IAAA,eACAxB,EAAA9B,IAAA2I,EAAA9D,OAAA,MAAA3G,KAAA0K,UAAAD,EAAAE,OAAAC,YAAA,IAAA,eACAhH,EAAA9B,IAAA2I,EAAA9D,OAAA,OAAA3G,KAAA0K,UAAAD,EAAAE,OAAAE,aAAA,IAAA,gBAEAL,EAAAM,SAAA,SAAAC,EAAAC,GACApH,EAAA9B,IAAAiJ,EAAA,GAAAC,EAAA,IAAA,gBAEAR,EAAA/K,IAAA,SAAAwL,GACA,MAAAxM,GAAAgB,IAAA6K,EAAAW,EAAAV,GAAA7K,KAAA,SAAAC,GAEA,MAAAA,GAAA8K,QAIAD,EAAAnE,KAAA,SAAA4E,EAAAC,GACA,MAAAzM,IACA0M,OAAA,OACAC,SAAAC,eAAA,qCACAC,IAAAhB,EAAAW,EAAAV,EACAE,KAAAS,IAJAzM,SAKA,SAAA8M,GACA1K,QAAAC,IAAA,eAAAyK,GACA3H,EAAAvB,UAAA,QAAA,eAAA,uBAAA,OACA3C,KAAA,SAAAC,GACA,MAAAA,GAAA8K,MAAA,WAAA9K,EAAA8K,KAAA9D,OACAhH,EAAA8K,MAIA,KAAA9K,EAAAgH,QACA/C,EAAAvB,UAAA,QAAA1C,EAAA8K,KAAAe,OAAA,SAAA,4BAAA7L,EAAAgH,OAAA,KACA9F,QAAAgC,MAAA,kCAAAlD,EAAAgH,UAKA,KAAAhH,EAAA8K,KAAAgB,KAEA5K,QAAAgC,MAAA,wBAAAlD,EAAA8K,KAAArF,SAGAxB,EAAAvB,UAAA,QAAA1C,EAAA8K,KAAAe,OAAA,cAAA7L,EAAA8K,KAAArF,QAAA,KAEAvE,QAAAgC,MAAA,aAAA7C,KAAA0K,UAAA/K,EAAA8K,QAEA9K,EAAA8K,SAIAD,EAAAkB,IAAA,SAAAT,EAAAC,GACA,MAAAzM,GAAAiN,IAAApB,EAAAW,EAAAC,GAAAxL,KAAA,SAAAC,GAGA,MAFAkB,SAAAC,IAAA,QAAAd,KAAA0K,UAAA/K,EAAA8K,OAEA9K,EAAA8K,QAGAD,EAAAA,UAAA,SAAAS,GACA,MAAAxM,GAAAA,UAAA6L,EAAAW,GAAAvL,KAAA,SAAAC,GACA,MAAAA,GAAA8K,QAIAD,QC3EA,WACAlM,QAAAC,OAAA,UAAA,SAEA8L,QAAA,UAAA,OAAA,YACA,SAAAlL,EAAAyH,GACA,GAAA4D,KAuCA,OAtCAA,GAAA/K,IAAA,SAAA8H,GACA,MAAApI,GAAAkH,KAAA,aACAD,MACAuF,UAAApE,KAEA7H,KAAA,SAAAC,GACA,MAAAK,MAAAC,MAAAN,EAAAyF,YAGAoF,EAAAoB,UAAA,SAAAC,GACA,MAAA1M,GAAAkH,KAAA,aACAD,MACAuF,UAAAE,EAAAhM,MAEAiM,WAAAD,EAAAE,OACArM,KAAA,SAAAC,GACA,GAAAqL,GAAAhL,KAAAC,MAAAN,EAAAyF,QAGA,OAFA4F,GAAArL,EAAAgL,OAAAE,YAAAzE,KAAAuF,WAAAI,KAAApM,EAAAgL,OAAAE,YAAAiB,WAEAd,KAGAR,EAAA/C,UAAA,SAAAuE,EAAAC,GACArF,EAAAsF,MACAC,WAAA,EACA7K,YAAA,2CACAC,WAAA,gBACA6K,KAAA,KACAC,SACAL,SAAA,WACA,MAAAA,IAEAC,WAAA,WACA,MAAAA,QAKAzB,QC5CA,WACAlM,QAAAC,OAAA,eAAA,SAEA8L,QAAA,eAAA,OAAA,YACA,SAAAlL,EAAAyH,GACA,GAAA4D,KA+DA,OA9DAA,GAAA/K,IAAA,SAAA6M,GACAzL,QAAAC,IAAA,oBAKA0J,EAAA+B,WAAA,SAAAC,EAAAC,GAEA,GAAAC,KAEA,IAAAD,GAAAD,EAAA,CACA,IAAA,GAAA5G,GAAA,EAAA+G,EAAAF,EAAA9H,OAAAgI,EAAA/G,EAAAA,IACA,GAAA6G,EAAA7G,GAAAgH,YAAAJ,EAAA,CACA,GAAAE,GAAAD,EAAA7G,EACA,QAGA8G,EAAAG,iBAKAL,KAEAA,EAAA,EAIA,IAAAM,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,4CACAC,WAAA,iBACA6K,KAAA,KACAW,YAAA,mBACAV,SACAW,OAAA,WACA,MAAAN,IAEAF,SAAA,WACA,MAAAA,MAKAM,GAAAG,SAAAvN,KAAA,SAAAwN,GAEAC,EAAA,sBAAAC,IAAA,aAAA,QACAD,EAAA,sBAAAC,IAAA,aAAA,GAAAD,EAAAE,QAAAC,UACAH,EAAA,sBAAAC,IAAA,SAAA,GAAAD,EAAAE,QAAAC,YAGAR,EAAAI,OAAAxN,KAAA,SAAAwN,GAGA,GAAA,cAAAA,EAAAK,OAAA,CACA,QACAjI,QAAA+B,UAAA6F,EAAAzC,QAEA,WACA5J,QAAAC,IAAA,uBAAA,GAAA6I,UAGAa,QCpEA,WACAlM,QAAAC,OAAA,cAAA,OAAA,gBAEA8L,QAAA,cAAA,OAAA,YAAA,cAAA,SAAAlL,EAAAyH,EAAAC,GACA,GAAA2D,KA+HA,OA9HAA,GAAA/K,IAAA,SAAA6M,GACAzL,QAAAC,IAAA,oBAEA0J,EAAAgD,wBAAA,SAAAtG,EAAAsF,GACA,GAAAiB,GAAA,GACAC,EAAA,EAEAxG,IACArG,QAAAC,IAAA,eACA2M,EAAA,UACAC,EAAAxG,GAEAsF,IACA3L,QAAAC,IAAA,gBACA2M,EAAA,WACAC,EAAAlB,GAIArN,EAAA2L,SAAA,OAAA,qBAEA3L,EAAAkH,KAAA,sBACAqH,MAAAA,EACAC,UAAAF,IAEA/N,KAAA,SAAAC,GACAR,EAAA2L,SAAAnL,EAAAgH,OAAAhH,EAAAyF,YAIAoF,EAAAoD,cAAA,SAAA1G,EAAAsF,GACA,GAAAiB,GAAA,GACAC,EAAA,EAaA,OAXAxG,IACArG,QAAAC,IAAA,eACA2M,EAAA,UACAC,EAAAxG,GAEAsF,IACA3L,QAAAC,IAAA,gBACA2M,EAAA,WACAC,EAAAlB,GAGArN,EAAAkH,KAAA,iBACAqH,MAAAA,EACAC,UAAAF,KAGAjD,EAAAqD,eAAA,SAAA3G,EAAAsF,EAAAsB,GACA,GAAAL,GAAA,GACAC,EAAA,EAaA,OAXAxG,IACArG,QAAAC,IAAA,eACA2M,EAAA,UACAC,EAAAxG,GAEAsF,IACA3L,QAAAC,IAAA,gBACA2M,EAAA,WACAC,EAAAlB,GAGArN,EAAAkH,KAAA,kBACAqH,MAAAA,EACAC,UAAAF,EACAI,eAAAC,KAGAtD,EAAAlD,UAAA,SAAAJ,EAAAH,GAEA,GAAA2F,KAEA,IAAA3F,GAAAG,EAAA,CACA,IAAA,GAAAtB,GAAA,EAAA+G,EAAA5F,EAAApC,OAAAgI,EAAA/G,EAAAA,IACA,GAAAmB,EAAAnB,GAAAmI,WAAA7G,EAAA,CACA,GAAAwF,GAAA3F,EAAAnB,EACA,QAGA8G,EAAAsB,aAKA9G,KAEAA,EAAA,EAIA,IAAA4F,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,2CACAC,WAAA,gBACA6K,KAAA,KACAW,YAAA,mBACAV,SACA4B,MAAA,WACA,MAAAvB,IAEAxF,QAAA,WACA,MAAAA,MAKA4F,GAAAG,SAAAvN,KAAA,SAAAwN,GAEAC,EAAA,sBAAAC,IAAA,aAAA,QACAD,EAAA,sBAAAC,IAAA,aAAA,GAAAD,EAAAE,QAAAC,UACAH,EAAA,sBAAAC,IAAA,SAAA,GAAAD,EAAAE,QAAAC,YAGAR,EAAAI,OAAAxN,KAAA,SAAAwN,GAGA,eAAAA,EAAAK,QACA1G,EAAA0F,WAAAW,EAAAzC,UAEA,WACA5J,QAAAC,IAAA,uBAAA,GAAA6I,UAGAa,QCnIA,WACAlM,QAAAC,OAAA,gBAAA,OAAA,qBAAA,sBAAA,2BAEA8L,QAAA,gBAAA,OAAA,YAAA,SAAAlL,EAAAyH,GACA,GAAA4D,KAmPA,OAlPAA,GAAA/K,IAAA,SAAA6M,GACAzL,QAAAC,IAAA,oBAEA0J,EAAAoD,cAAA,SAAAM,EAAA1B,GACA,GAAAiB,GAAA,GACAC,EAAA,EAaA,OAXAQ,IACArN,QAAAC,IAAA,eACA2M,EAAA,UACAC,EAAAQ,GAEA1B,IACA3L,QAAAC,IAAA,gBACA2M,EAAA,WACAC,EAAAlB,GAGArN,EAAAkH,KAAA,iBACAqH,MAAAA,EACAC,UAAAF,KAGAjD,EAAA2D,eAAA,SAAAD,EAAAnM,EAAAqM,EAAAC,GACA,GAAA3B,KAEA,IAAA0B,GAAAF,EAAA,CACA,IAAA,GAAAtI,GAAA,EAAA+G,EAAAyB,EAAAzJ,OAAAgI,EAAA/G,EAAAA,IACA,GAAAwI,EAAAxI,GAAAsI,UAAAA,EAAA,CACA,GAAAxB,GAAA0B,EAAAxI,EACA,QAGA8G,EAAA4B,gBAKAJ,KAEAA,EAAA,EAIA,IAAApB,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,gDACAC,WAAA,qBACA6K,KAAA,KACAW,YAAA,mBACAV,SACAkC,WAAA,WACA,MAAA7B,IAEAwB,QAAA,WACA,MAAAA,IAEAG,SAAA,WACA,MAAAA,MAYA,OAPAvB,GAAAG,SAAAvN,KAAA,SAAAwN,GAEAC,EAAA,sBAAAC,IAAA,aAAA,QACAD,EAAA,sBAAAC,IAAA,aAAA,GAAAD,EAAAE,QAAAC,UACAH,EAAA,sBAAAC,IAAA,SAAA,GAAAD,EAAAE,QAAAC,YAGAR,EAAAI,OAAAxN,KAAA,SAAAwN,GAGA,MAAA,WAAAA,EAAAK,QAAA,WAAAL,EAAAK,QAAA,WAAAL,EAAAK,QACApO,EAAA2L,SAAA,OAAA,WAAAoC,EAAAK,OAAA,eAGApO,EAAAkH,KAAA,WACAmI,aAAAtB,EAAAzC,KACAgE,SAAAvB,EAAAzC,KAAAtK,GACAuO,YAAAxB,EAAAwB,YACAnB,OAAAL,EAAAK,SAEA7N,KAAA,SAAAC,GAIA,MAFAR,GAAA2L,SAAA,UAAA,qBAEAnL,SAIAR,GAAA2L,SAAA,QAAA,sBAEA,WACAjK,QAAAC,IAAA,uBAAA,GAAA6I,UAGAa,EAAAmE,gBAAA,SAAAC,EAAAR,EAAAC,GACA,GAAA3B,KAEA,IAAA0B,GAAAQ,EAAA,CACA,IAAA,GAAAhJ,GAAA,EAAA+G,EAAAyB,EAAAzJ,OAAAgI,EAAA/G,EAAAA,IACA,GAAAwI,EAAAxI,GAAAgJ,UAAAA,EAAA,CACA,GAAAlC,GAAA0B,EAAAxI,EACA,QAGA8G,EAAAmC,eAKAD,KAEAA,EAAA,EAIA,IAAA9B,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,iDACAC,WAAA,sBACA6K,KAAA,KACAW,YAAA,mBACAV,SACAyC,YAAA,WACA,MAAApC,IAEAkC,QAAA,WACA,MAAAA,IAEAP,SAAA,WACA,MAAAA,MAYA,OAPAvB,GAAAG,SAAAvN,KAAA,SAAAwN,GAEAC,EAAA,sBAAAC,IAAA,aAAA,QACAD,EAAA,sBAAAC,IAAA,aAAA,GAAAD,EAAAE,QAAAC,UACAH,EAAA,sBAAAC,IAAA,SAAA,GAAAD,EAAAE,QAAAC,YAGAR,EAAAI,OAAAxN,KAAA,SAAAwN,GAGA,MAAA,WAAAA,EAAAK,QAAA,WAAAL,EAAAK,QAAA,WAAAL,EAAAK,QACApO,EAAA2L,SAAA,OAAA,WAAAoC,EAAAK,OAAA,eAGApO,EAAAkH,KAAA,WACAmI,aAAAtB,EAAAzC,KACAgE,SAAAvB,EAAAzC,KAAAtK,GACAuO,YAAAxB,EAAAwB,YACAnB,OAAAL,EAAAK,SAEA7N,KAAA,SAAAC,GAIA,MAFAR,GAAA2L,SAAA,UAAA,sBAEAnL,SAIAR,GAAA2L,SAAA,QAAA,sBAEA,WACAjK,QAAAC,IAAA,uBAAA,GAAA6I,UAGAa,EAAAuE,mBAAA,SAAA5O,EAAAiO,GACA,GAAA1B,KAEA,IAAA0B,GAAAjO,EAAA,CACA,IAAA,GAAAyF,GAAA,EAAA+G,EAAAyB,EAAAzJ,OAAAgI,EAAA/G,EAAAA,IACA,GAAAwI,EAAAxI,GAAAzF,KAAAA,EAAA,CACA,GAAAuM,GAAA0B,EAAAxI,EACA,QAGA8G,EAAAmC,eAKA1O,KAEAA,EAAA,EAIA,IAAA2M,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,oDACAC,WAAA,yBACA6K,KAAA,KACAW,YAAA,mBACAV,SACA2C,eAAA,WACA,MAAAtC,IAEAvM,GAAA,WACA,MAAAA,MAYA,OAPA2M,GAAAG,SAAAvN,KAAA,SAAAwN,GAEAC,EAAA,sBAAAC,IAAA,aAAA,QACAD,EAAA,sBAAAC,IAAA,aAAA,GAAAD,EAAAE,QAAAC,UACAH,EAAA,sBAAAC,IAAA,SAAA,GAAAD,EAAAE,QAAAC,YAGAR,EAAAI,OAAAxN,KAAA,SAAAwN,GAGA,MAAA,WAAAA,EAAAK,QACApO,EAAA2L,SAAA,OAAA,WAAAoC,EAAAK,OAAA,eAGApO,EAAAkH,KAAA,WACAmI,aAAAtB,EAAAzC,KACAgE,SAAAvB,EAAAzC,KAAAtK,GACAuO,YAAAxB,EAAAwB,YACAnB,OAAAL,EAAAK,SAEA7N,KAAA,SAAAC,GAIA,MAFAR,GAAA2L,SAAA,UAAA,yBAEAnL,SAIAR,GAAA2L,SAAA,QAAA,sBAEA,WACAjK,QAAAC,IAAA,uBAAA,GAAA6I,UAGAa,QCvPAlM,QAAAC,OAAA,sBAAA,eAAA,YACAgD,WAAA,sBAAA,SAAA,oBAAA,aAAA,UAAA,WAAA,WAAA,aAAA,SAAA+D,EAAA2J,EAAAV,EAAAL,EAAAzK,EAAA4K,EAAApP,GAsHA,QAAAiQ,KACA5J,EAAA6J,WAAA,YAtHA7J,EAAA8J,oBAAAb,EACAjJ,EAAAiJ,WAAAc,OAAAC,OAAAf,GACAjJ,EAAAiJ,WAAApO,GAAA+N,EACA5I,EAAA+I,SAAAA,EACA/I,EAAAiK,cAAA,wBACAjK,EAAAkK,UAAA,OACAlK,EAAAmK,WAAA,SACAnK,EAAAoJ,YAAA,MAEApJ,EAAAoK,eAAA,aAGApK,EAAAiJ,WAAApO,WAEAmF,GAAAiJ,WAAApO,GAEAmF,EAAAkK,UAAA,UACAlK,EAAAmK,WAAA,SAEAnK,EAAAiK,cAAA,kBACAjK,EAAAiJ,WAAAoB,SAAA1Q,EAAAW,KAEA0F,EAAA8J,oBAAA9Q,QAAAsR,KAAAtK,EAAAiJ,YAEA,KAAAjJ,EAAAiJ,WAAAsB,SACAvK,EAAAoK,eAAA,YAGApK,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAAiJ,WACAG,YAAApJ,EAAAoJ,YAEAO,GAAAc,MAAA7C,IAEA5H,EAAA0K,UAAA,WACA,KAAA1K,EAAAiJ,WAAAsB,QACAvK,EAAAiJ,WAAAsB,OAAA,IACAvK,EAAAoK,eAAA,aAKApK,EAAAiJ,WAAAsB,OAAA,IACAvK,EAAAoK,eAAA,cAEApK,EAAAwK,QAEAxK,EAAAA,UAAA,WACA,GAAA4H,IACAK,OAAA,SACA9C,KAAAnF,EAAAiJ,WACAG,YAAApJ,EAAAoJ,YAEAO,GAAAc,MAAA7C,IAGA5H,EAAA2K,gBACA9P,GAAA,IAAAC,MAAA,QACAD,GAAA,IAAAC,MAAA,OAGAkF,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAA,gBAAAD,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,oBAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,2BAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,yFAEA,QAAA+K,GAEA,IAAA,iBACA/K,QAAA,yCACA,MAGA,KAAA,SACAA,QAAA,yCACA,MAGA,KAAA,mBACAA,QAAA,yCACA,MAEA,SACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAE,QAAAjL,UACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAEArL,EAAAsL,WAAA,WACAtL,EAAAiJ,WAAAjQ,QAAAsR,KAAAtK,EAAA8J,qBACA9J,EAAAuL,OAAAC,gBAGAxL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,OCpHA5Q,QAAAC,OAAA,eAAA,eAAA,YACAgD,WAAA,eAAA,SAAA,oBAAA,MAAA,QAAA,oBAAA,WAAA,SAAA+D,EAAA2J,EAAA+B,EAAAC,EAAAC,EAAAzN,GA0EA,QAAAyL,KACA5J,EAAA6J,WAAA,cAxEA7J,EAAA0L,IAAA3B,OAAAC,OAAA0B,GACA1L,EAAA0L,IAAA7Q,GAAA8Q,EACA3L,EAAA4L,kBAAAA,EAEA5L,EAAAkK,UAAA,mBACAlK,EAAAmK,WAAA,OACAnK,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAA0L,IAEA/B,GAAAc,MAAA7C,IAIA5H,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAAhL,GAAA,sEAEA,IAAA,gBAAA+K,IAAA,SAAAA,EAAA5C,OACAnI,EAAA,oBAEA,QAAA+K,GAEA,IAAA,iBACA/K,EAAA,yCACA,MAGA,KAAA,SACAA,EAAA,yCACA,MAGA,KAAA,mBACAA,EAAA,yCACA,MAEA,SACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAE,QAAAjL,IACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAGArL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,GAEA5J,EAAA0L,IAAA7Q,WAEAmF,GAAA0L,IAAA7Q,GAEAmF,EAAAkK,UAAA,qBACAlK,EAAAmK,WAAA,UAEAnK,EAAA6L,OAAA,uBCvEA7S,QAAAC,OAAA,uBAAA,eAAA,YACAgD,WAAA,uBAAA,SAAA,oBAAA,cAAA,UAAA,WAAA,WAAA,aAAA,SAAA+D,EAAA2J,EAAAH,EAAAF,EAAAnL,EAAA4K,EAAApP,GA0GA,QAAAiQ,KACA5J,EAAA6J,WAAA,sBA1GA7J,EAAA8L,qBAAAtC,EACAxJ,EAAAwJ,YAAAO,OAAAC,OAAAR,GACAxJ,EAAAwJ,YAAA3O,GAAAyO,EACAtJ,EAAA+I,SAAAA,EACA/I,EAAA+L,eAAA,yBACA/L,EAAAkK,UAAA,OACAlK,EAAAmK,WAAA,SACAnK,EAAAoJ,YAAA,OAGApJ,EAAAwJ,YAAA3O,WAEAmF,GAAAwJ,YAAA3O,GAEAmF,EAAAkK,UAAA,UACAlK,EAAAmK,WAAA,SAEAnK,EAAA+L,eAAA,mBACA/L,EAAAwJ,YAAAa,SAAA1Q,EAAAW,IACA0F,EAAAwJ,YAAAwC,aAAA,IACAhM,EAAAwJ,YAAAyC,cAAA,IACAjM,EAAAwJ,YAAA0C,gBAAA,KAEAlM,EAAA8L,qBAAA9S,QAAAsR,KAAAtK,EAAAwJ,aAEA,KAAAxJ,EAAAwJ,YAAAe,SACAvK,EAAAoK,eAAA,YAGApK,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAAwJ,YACAJ,YAAApJ,EAAAoJ,YAEAO,GAAAc,MAAA7C,IAEA5H,EAAAA,UAAA,WACA,GAAA4H,IACAK,OAAA,SACA9C,KAAAnF,EAAAwJ,YACAJ,YAAApJ,EAAAoJ,YAEAO,GAAAc,MAAA7C,IAGA5H,EAAA2K,gBACA9P,GAAA,IAAAC,MAAA,QACAD,GAAA,IAAAC,MAAA,OAGAkF,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAA,gBAAAD,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,oBAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,2BAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,yFAEA,QAAA+K,GAEA,IAAA,iBACA/K,QAAA,yCACA,MAGA,KAAA,SACAA,QAAA,yCACA,MAGA,KAAA,mBACAA,QAAA,yCACA,MAEA,SACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAE,QAAAjL,UACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAEArL,EAAAsL,WAAA,WACAtL,EAAAwJ,YAAAxQ,QAAAsR,KAAAtK,EAAA8L,sBACA9L,EAAAuL,OAAAC,gBAGAxL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,OCxGA5Q,QAAAC,OAAA,oBACAgD,WAAA,iBAAA,SAAA,oBAAA,WAAA,aAAA,SAAA+D,EAAA2J,EAAAjD,EAAAC,GAEA3G,EAAA0G,SAAAA,EACA1G,EAAA2G,WAAAA,EAEA3G,EAAAyK,MAAA,WACAd,EAAAiB,QAAA,aCPA5R,QAAAC,OAAA,kBAAA,eAAA,YACAgD,WAAA,kBAAA,SAAA,oBAAA,SAAA,WAAA,WAAA,OAAA,aAAA,SAAA+D,EAAA2J,EAAAjC,EAAAR,EAAA/I,EAAAtE,EAAA2H,GA0HA,QAAA2K,KACAtS,EAAAkH,KAAA,qBACAvG,MAAAwF,EAAA0H,OAAAH,aACA3F,QAAA,IACAqG,OAAA,QAEA7N,KAAA,SAAAC,GACA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,QAEAE,GAAAoM,cAAAtM,EAAAsM,cAEApM,EAAAqM,SACArM,EAAAqM,MAAAC,IAAAxM,EAAAuM,MAAAC,IACAtM,EAAAqM,MAAAE,IAAAzM,EAAAuM,MAAAE,IACAvM,EAAAwM,SAAA1M,EAAA2M,eAAAC,OACA5M,EAAA2M,eAAAE,YACA3M,EAAA2M,aAAA,EAEA3M,EAAA2M,aAAA,EAEA7M,EAAA2M,eAAAG,YACA5M,EAAA4M,aAAA,EAEA5M,EAAA4M,aAAA,EAEA5M,EAAA6M,SAAA/M,EAAA2M,eAAAI,SACA7M,EAAA8M,WAAA9T,QAAAsR,KAAAtK,EAAA6M,UACA7M,EAAAuL,OAAAC,eAEAxL,EAAA+M,gBAEA5O,EAAAyL,EAAA,KA4GA,QAAAA,KACA5J,EAAA6J,WAAA,cAnQA7J,EAAA0H,OAAAA,EACA1H,EAAA0H,OAAA7M,GAAAqM,EAEAlH,EAAAkK,UAAA,cACAlK,EAAAmK,WAAA,OACAnK,EAAAgN,SAAA,WAEAhN,EAAAiN,gBAAA,aACAjN,EAAAkN,kBAAA,iBACAlN,EAAAmN,eAAA,GACAnN,EAAAoN,eAAA,GACApN,EAAA2M,aAAA,EACA3M,EAAA4M,aAAA,EAEA5M,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAA0H,OAEAiC,GAAAc,MAAA7C,IAEA5H,EAAAqN,mBAAA,WACA7L,EAAA0G,wBAAA,KAAAlI,EAAA0H,OAAA7M,KAEAmF,EAAAsI,cAAA,WACA9G,EAAA8G,cAAA,KAAAtI,EAAA0H,OAAA7M,IACAT,KAAA,SAAAC,GACA2F,EAAA0H,OAAA4F,eAAAjT,EAAAkT,QAEA1T,EAAA2L,SAAAnL,EAAAgH,OAAAhH,EAAAyF,YAIAE,EAAAwN,eAAA,WACAxN,EAAA0H,OAAA7M,KACAmF,EAAA0H,OAAA+F,YAiBAtB,IAfAtS,EAAAkH,KAAA,oBACAmG,SAAAlH,EAAA0H,OAAA7M,GACAoN,OAAA,QAEA7N,KAAA,SAAAC,GACA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,SAEAjF,EAAAmF,EAAA0H,OAAA7M,EACAmF,GAAA0H,OAAA5H,EAAAsH,QACApH,EAAA0H,OAAA7M,GAAAA,EAEAsR,QAOAnM,EAAA+M,cAAA,WACA,MAAA,IAAA/M,EAAA0H,OAAAiF,aACA3M,EAAAiN,gBAAA,aACAjN,EAAAmN,eAAA,6HACA,IAGAnN,EAAAiN,gBAAA,cACA,IAGAjN,EAAAuI,eAAA,SAAAC,GACAA,EACA3O,EAAA2L,SAAA,OAAA,mBAEA3L,EAAA2L,SAAA,OAAA,mBAEAhE,EAAA+G,eAAA,KAAAvI,EAAA0H,OAAA7M,GAAA2N,GACApO,KAAA,SAAAC,GACA,WAAAA,EAAAgH,SACArB,EAAA2M,YAAAnE,EACAA,EACAxI,EAAA0H,OAAAiF,YAAA,EAEA3M,EAAA0H,OAAAiF,YAAA,EAEA3M,EAAA+M,gBACAlT,EAAA2L,SAAA,UAAA,aAIAxF,EAAA0N,cAAA,WACA,MAAA,IAAA1N,EAAA0H,OAAAkF,aACA5M,EAAAkN,kBAAA,iBACAlN,EAAAoN,eAAA,+GACA,IAGApN,EAAAkN,kBAAA,eACA,IAGAlN,EAAA2N,iBAAA,WACA,GAAA3N,EAAA2M,YACA,GAAApE,IAAA,MAEA,IAAAA,IAAA,CAEA1O,GAAAkH,KAAA,WACAvG,MAAAwF,EAAA0H,OAAAH,aACAoF,YAAApE,EACAN,OAAA,iBAEA7N,KAAA,SAAAC,GACAK,KAAAC,MAAAN,EAAAyF,QAEAE,GAAA2M,YACA3M,EAAA2M,aAAA,EAGA3M,EAAA2M,aAAA,KAyCA3M,EAAA4N,YAAA,WACA5N,EAAA8M,WAAA9T,QAAAsR,KAAAtK,EAAA6M,UACA7M,EAAAuL,OAAAC,gBAEAxL,EAAA6N,UAAA,WACAtS,QAAAC,IAAA,iBAAAwE,EAAA8M,YAEAjT,EAAAkH,KAAA,kBACAwG,aAAAvH,EAAA0H,OAAAH,aACAuG,gBAAA9N,EAAA8M,WACA7B,OAAA,SACAhD,OAAA,WAEA7N,KAAA,SAAAC,GACAK,KAAAC,MAAAN,EAAAyF,QAEAE,GAAA6M,SAAA7M,EAAA8M,WACA9M,EAAA4N,cACA/T,EAAA2L,SAAA,UAAA,oBAGAxF,EAAA+B,UAAA,SAAAH,GACA,GAAAgG,IACAK,OAAA,eACA9C,KAAAvD,EAEAJ,GAAAQ,UAAAJ,EAAA5B,EAAAyB,QACAkI,EAAAc,MAAA7C,IAGA5H,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAAhL,GAAA,uEACAiO,GAAA,CAEA,IAAA,gBAAAlD,IAAA,SAAAA,EAAA5C,OACAnI,EAAA,oBAEA,IAAA,gBAAA+K,GACAkD,GAAA,MAEA,QAAAlD,GAEA,IAAA,iBACA/K,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,SACAjO,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,SACAjO,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,mBACAjO,EAAA,0CACAiO,GAAA,CACA,MAEA,SACAjO,EAAA,kBACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAkD,IAAAhD,QAAAjL,IACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAKArL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,GAEA5J,EAAA0H,OAAA7M,WAEAmF,GAAA0H,OAAA7M,GAEAmF,EAAAkK,UAAA,eACAlK,EAAAmK,WAAA,UAEAnK,EAAAgN,SAAA,wBClQAhU,QAAAC,OAAA,iBAAA,eAAA,UAAA,eACAgD,WAAA,iBAAA,SAAA,oBAAA,QAAA,UAAA,WAAA,OAAA,aAAA,SAAA+D,EAAA2J,EAAAhB,EAAA/G,EAAAzD,EAAAtE,EAAA2H,GAuHA,QAAA2K,KACAtS,EAAAkH,KAAA,qBACAvG,MAAAwF,EAAA2I,MAAAqF,YACApM,QAAA5B,EAAA2I,MAAA9N,GACAoN,OAAA,QAEA7N,KAAA,SAAAC,GACA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,QACAE,GAAAoM,cAAAtM,EAAAsM,cACApM,EAAAqM,SACArM,EAAAqM,MAAAC,IAAAxM,EAAAuM,MAAAC,IACAtM,EAAAqM,MAAAE,IAAAzM,EAAAuM,MAAAE,IACAvM,EAAAwM,SAAA1M,EAAA2M,eAAAC,OACA1M,EAAAsH,UAAAxH,EAAA2M,eAAAnF,UAEAxH,EAAA2M,eAAAE,YACA3M,EAAA2M,aAAA,EAEA3M,EAAA2M,aAAA,EAEA7M,EAAA2M,eAAAG,YACA5M,EAAA4M,aAAA,EAEA5M,EAAA4M,aAAA,EAEA5M,EAAA6M,SAAA/M,EAAA2M,eAAAI,SACA7M,EAAA8M,WAAA9T,QAAAsR,KAAAtK,EAAA6M,UACA7M,EAAAuL,OAAAC,eAEAxL,EAAA+M,gBAEA5O,EAAAyL,EAAA,KA4GA,QAAAA,KACA5J,EAAA6J,WAAA,cAhQA7J,EAAA2I,MAAAA,EACA3I,EAAA2I,MAAA9N,GAAA+G,EAEA5B,EAAAkK,UAAA,aACAlK,EAAAmK,WAAA,OACAnK,EAAAgN,SAAA,UAEAhN,EAAAiN,gBAAA,aACAjN,EAAAmN,eAAA,GACAnN,EAAA2M,aAAA,EAEA3M,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAA2I,MAEAgB,GAAAc,MAAA7C,IAEA5H,EAAAqN,mBAAA,WACA7L,EAAA0G,wBAAAlI,EAAA2I,MAAA9N,GAAA,OAEAmF,EAAAsI,cAAA,WACA9G,EAAA8G,cAAAtI,EAAA2I,MAAA9N,GAAA,MACAT,KAAA,SAAAC,GAEA2F,EAAA2I,MAAAsF,QAAA5T,EAAAkT,QAEA1T,EAAA2L,SAAAnL,EAAAgH,OAAAhH,EAAAyF,YAGAE,EAAAuI,eAAA,SAAAC,GACAA,EACA3O,EAAA2L,SAAA,OAAA,mBAEA3L,EAAA2L,SAAA,OAAA,mBAEAhE,EAAA+G,eAAAvI,EAAA2I,MAAA9N,GAAA,KAAA2N,GACApO,KAAA,SAAAC,GACA,WAAAA,EAAAgH,SACArB,EAAA2M,YAAAnE,EACAA,EACAxI,EAAA2I,MAAAgE,YAAA,EAEA3M,EAAA2I,MAAAgE,YAAA,EAEA3M,EAAA+M,gBACAlT,EAAA2L,SAAA,UAAA,aAIAxF,EAAAwN,eAAA,WACAxN,EAAA2I,MAAA9N,KACAmF,EAAA2I,MAAAD,SAgBAyD,IAdAtS,EAAAkH,KAAA,mBACAa,QAAA5B,EAAA2I,MAAA9N,GACAoN,OAAA,QAEA7N,KAAA,SAAAC,GACA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,SAEAjF,EAAAmF,EAAA2I,MAAA9N,EACAmF,GAAA2I,MAAA7I,EAAAsH,QACApH,EAAA2I,MAAA9N,GAAAA,EACAsR,QAQAnM,EAAAiH,WAAA,WAEA,GAAAW,IACAK,OAAA,aACA9C,KAAAnF,EAAAsH,UAEAqC,GAAAc,MAAA7C,IAIA5H,EAAA+M,cAAA,WACA,MAAA/M,GAAA2M,aACA3M,EAAAiN,gBAAA,aACAjN,EAAAmN,eAAA,+EACA,IAGAnN,EAAAiN,gBAAA,cACA,IAIAjN,EAAA2N,iBAAA,WACA,GAAA3N,EAAA2M,YACA,GAAApE,IAAA,MAEA,IAAAA,IAAA,CAEA1O,GAAAkH,KAAA,WACAvG,MAAAwF,EAAA2I,MAAAqF,YACArB,YAAApE,EACAN,OAAA,iBAEA7N,KAAA,SAAAC,GACAK,KAAAC,MAAAN,EAAAyF,QAEAE,GAAA2M,YACA3M,EAAA2M,aAAA,EAGA3M,EAAA2M,aAAA,KAyCA3M,EAAA4N,YAAA,WACA5N,EAAA8M,WAAA9T,QAAAsR,KAAAtK,EAAA6M,UACA7M,EAAAuL,OAAAC,gBAEAxL,EAAA6N,UAAA,WACAtS,QAAAC,IAAA,iBAAAwE,EAAA8M,YAEAjT,EAAAkH,KAAA,kBACAwG,aAAAvH,EAAA2I,MAAAqF,YACAF,gBAAA9N,EAAA8M,WACA7B,OAAA,SACAhD,OAAA,WAEA7N,KAAA,SAAAC,GACAK,KAAAC,MAAAN,EAAAyF,QAEAE,GAAA6M,SAAA7M,EAAA8M,WACA9M,EAAA4N,cACA/T,EAAA2L,SAAA,UAAA,oBAGAxF,EAAA+B,UAAA,SAAAH,GACA,GAAAgG,IACAK,OAAA,oBACA9C,KAAAvD,EAEAJ,GAAAQ,UAAAJ,EAAA5B,EAAAyB,QACAkI,EAAAc,MAAA7C,IAGA5H,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAAhL,GAAA,uEACAiO,GAAA,CAEA,IAAA,gBAAAlD,IAAA,SAAAA,EAAA5C,OACAnI,EAAA,oBAEA,IAAA,gBAAA+K,GACAkD,GAAA,MAEA,QAAAlD,GAEA,IAAA,iBACA/K,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,SACAjO,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,SACAjO,EAAA,0CACAiO,GAAA,CACA,MAGA,KAAA,mBACAjO,EAAA,0CACAiO,GAAA,CACA,MAEA,SACAjO,EAAA,kBACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAkD,IAAAhD,QAAAjL,IACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAKArL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,GAEA5J,EAAA2I,MAAA9N,WAEAmF,GAAA2I,MAAA9N,GAEAmF,EAAAkK,UAAA,eACAlK,EAAAmK,WAAA,UAEAnK,EAAAgN,SAAA,wBC/PAhU,QAAAC,OAAA,0BAAA,eAAA,YACAgD,WAAA,0BAAA,SAAA,oBAAA,iBAAA,KAAA,WAAA,SAAA+D,EAAA2J,EAAAD,EAAA7O,EAAAsD,GAuFA,QAAAyL,KACA5J,EAAA6J,WAAA,YAvFA7J,EAAAkO,wBAAAxE;AACA1J,EAAA0J,eAAAK,OAAAC,OAAAN,GACA1J,EAAA0J,eAAA7O,GAAAA,EACAmF,EAAAmO,kBAAA,4BACAnO,EAAAkK,UAAA,OACAlK,EAAAmK,WAAA,SACAnK,EAAAoJ,YAAA,UAEApJ,EAAAkO,wBAAAlV,QAAAsR,KAAAtK,EAAA0J,gBAEA,KAAA1J,EAAA0J,eAAAa,SACAvK,EAAAoK,eAAA,YAGApK,EAAAwK,KAAA,WACA,GAAA5C,IACAK,OAAAjI,EAAAmK,WACAhF,KAAAnF,EAAA0J,eACAN,YAAApJ,EAAAoJ,YAEAO,GAAAc,MAAA7C,IAGA5H,EAAAoO,SAAA,WACAC,MAAA,iBAGArO,EAAA2K,gBACA9P,GAAA,IAAAC,MAAA,QACAD,GAAA,IAAAC,MAAA,OAGAkF,EAAAI,OAAA,WACAuJ,EAAAiB,QAAA,WAIA5K,EAAAlG,IAAA,gBAAA,SAAAC,EAAA8Q,EAAAC,GACA,GAAA,gBAAAD,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,oBAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,2BAEA,IAAA,gBAAA+K,IAAA,WAAAA,EAAA5C,OACAnI,QAAA,yFAEA,QAAA+K,GAEA,IAAA,iBACA/K,QAAA,yCACA,MAGA,KAAA,SACAA,QAAA,yCACA,MAGA,KAAA,mBACAA,QAAA,yCACA,MAEA,SACAvE,QAAAC,IAAA,mBAAAsP,EAAA,QAAA,WAAA,IAAAD,EAAA,KAGAE,QAAAjL,UACA/F,EAAAiR,mBAIAhL,EAAA6J,WAAA,SAAA5D,GACA,GAAA/C,GAAA,gBAAA+C,GAAAA,EAAAgF,OAAAC,SAAAC,eAAAlF,EAEA/C,GAAAkI,MAAApD,OAAA9E,EAAAmI,aAAA,EAAA,MAEArL,EAAAsL,WAAA,WACAtL,EAAA0J,eAAA1Q,QAAAsR,KAAAtK,EAAAkO,yBACAlO,EAAAuL,OAAAC,gBAGAxL,EAAAyL,OAAA,WACAtN,EAAAyL,EAAA,OCrFA,WACA5Q,QAAAC,OAAA,cACAgF,UAAA,WAAA,WACA,OACAqQ,SAAA,IACA9P,SAAA,IACAC,MACA8P,IAAA,SAAA7P,EAAAwE,EAAAtE,GACA,GAAA8G,GAAA9G,EAAAmM,SAAA,eAEA7H,GAAAsL,KAAA,QAAA,SAAAzU,GACAgR,QAAArF,KACA3L,EAAA0U,2BACA1U,EAAAiR,2BCbA,WACAhS,QAAAC,OAAA,mBAAA,aAEAgF,UAAA,eAAA,WACA,OACAO,SAAA,IACAE,OACAgQ,UAAA,KACAjS,KAAA,KACAkS,KAAA,MAGAnO,SAAA,sCACA/B,KAAA,SAAAC,EAAAwE,EAAAtE,GACAF,EAAAiQ,KACAjQ,EAAAkQ,WAAA,2CAGAlQ,EAAAkQ,WAAA,oCAEA3S,YAAA,SAAA,YAAA,SAAA,SAAA+D,EAAApG,EAAA6G,GACAlF,QAAAC,IAAA,kBAAAwE,EAAA0O,UAAA,KAEAjO,EAAAtG,IAAA6F,EAAA0O,WAAAtU,KAAA,SAAAC,GACA2F,EAAAiC,OAAA5H,EACAkB,QAAAC,IAAAwE,EAAAiC,OAEA,KAAA,GAAA4M,KAAAxU,GAAA,CACA,GAAAyU,GAAAzU,EAAAwU,EACAtT,SAAAC,IAAA,UAAAqT,EAAA,iBAAAC,EAAAC,MAAAC,eAIAhP,EAAAiP,WAAA,WACA,MAAAjP,GAAA2O,KAGA3O,EAAA2O,MAFA,GAMA3O,EAAAkP,WAAA,SAAAjJ,GACAA,EAAA+E,gBAEA,IAAAmE,GAAAlJ,EAAAmJ,cAEA9O,EAAA6O,EAAAE,qBAAA,KAAA,GAAAC,UAGAC,EAAAJ,EAAAK,QAAA,aAGAlP,GAAAmP,SAAA,0BACAnP,EAAAC,OAAA,yBACAD,EAAAoP,IAAA,0BAEAH,EAAAD,UAAAI,IAAA,oBAEA1P,EAAA2P,MAAAC,QAAA,GAMAtP,EAAAmP,SAAA,4BACAnP,EAAAC,OAAA,0BACAD,EAAAoP,IAAA,yBAEAH,EAAAD,UAAA/O,OAAA,oBAEAP,EAAA2P,MAAAC,QAAA,GAIA5P,EAAA6P,MAAA,yBAEA7P,EAAA2P,SACA3P,EAAA2P,MAAAG,WAEA9P,EAAAlG,IAAA,SAAA,SAAAC,EAAA4V,GACA3P,EAAA2P,MAAAA,EACA3P,EAAA2P,MAAAG,QAAAC,eAAA,EACA/P,EAAA2P,MAAAC,QAAA,EACA5P,EAAA2P,MAAAG,QAAAE,kBAAA,IAKAhQ,EAAAlG,IAAA,oBAAA,SAAAmM,EAAAgK,GACAlI,OAAAmI,cAAA,GAAAC,OAAA,aAGAnQ,EAAAoQ,QAAA,SAAAC,EAAAC,GACA/U,QAAAC,IAAA6U,EAAAC,MAGAvN,aAAA,mBChGA,WACA/J,QAAAC,OAAA,oBAAA,eAAA,UAAA,YAEAgF,UAAA,mBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,8CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,aAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAAD,GACAqG,EAAAyQ,eACAzQ,EAAA0B,QAEA,IAAAgP,GAAAnU,IAEAyD,GAAAvF,QAAA,WAEA,MAAAd,GAAAc,SAEAuF,EAAA8B,WAAA,SAAA6J,GAEA,MAAA3L,GAAAvF,UAAAkR,GAAA7Q,OAGAyB,KAAA8E,SACAxG,GAAA,GAAAC,MAAA,KACAD,GAAA,UAAAC,MAAA,YACAD,GAAA,UAAAC,MAAA,YAIAkF,EAAAqB,OAAA,SAAArB,GACA,MAAA0Q,GAAArP,QAKArB,EAAA2Q,SACAC,OAAA,GACApW,MAAA,GACAqW,GAAA,GACAC,GAAA,GACAC,iBAAA,GACAC,aAAA,GACAC,gBAAA,GACAC,kBAAA,IAGAlR,EAAAmR,gBAAA,WACAtJ,EAAA,2BAAAuJ,UAIA,IAAAC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACArB,OAAA,GACApW,MAAA,GACAqW,GAAA,OACAC,GAAA,GACAC,iBAAA,GACAC,aAAA,GACAC,gBAAA,GACAC,kBAAA,IAEA9M,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,kBACAD,KAAAA,IACA1G,KAAA,SAAAC,GAEA2F,EAAAyQ,YAAA/V,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAAyQ,YAAAzJ,EAAA5C,UAAApE,EAAAyQ,WAEAzJ,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCpJA,WACA/J,QAAAC,OAAA,aAAA,eAAA,eAAA,cAAA,iBAEAgF,UAAA,YAAA,WACA,OACAO,SAAA,IACAxC,YAAA,uCACA0C,SACAzC,YAAA,SAAA,OAAA,YAAA,aAAA,SAAA+D,EAAAnG,EAAAyH,EAAA3H,GACAqG,EAAA2S,gBAAA,WACA9Y,EAAAkH,KAAA,sBACA3G,KAAA,SAAAC,GACA2F,EAAA4S,KAAAlY,KAAAC,MAAAN,EAAAyF,SACAE,EAAA6S,UAAAxY,EAAAqH,MACA1B,EAAA4L,kBAAAvR,EAAAuR,qBAIA5L,EAAA8S,KAAA,EACA9S,EAAA+S,QAAA,SAAApH,GACA,GAAAA,EACA,GAAAvE,GAAApH,EAAA4S,KAAAjH,GAAAvE,YACA,CACA,GAAAA,KACAuE,GAAA,EAGA,GAAAnE,GAAAlG,EAAAsF,MACAC,WAAA,EACA7K,YAAA,yCACAC,WAAA,cACA6K,KAAA,KACAW,YAAA,mBACAV,SACA2E,IAAA,WACA,MAAAtE,IAEAuE,MAAA,WACA,MAAAA,IAEAC,kBAAA,WACA,MAAA5L,GAAA4L,qBAKApE,GAAAI,OAAAxN,KAAA,SAAAwN,GAGA,GAAA,SAAAA,EAAAK,OAAA,CACA,GAAA+K,GAAApL,EAAAzC,KACA8N,EAAAjT,EAAA4S,KAAAI,EAAAnY,IAAAuM,QAGA8B,IAGA,KAAA,GAAAgK,KAAAD,GAEAA,EAAAC,KAAAtL,EAAAzC,KAAA+N,KAEAhK,EAAAgK,GAAAtL,EAAAzC,KAAA+N,GAKArZ,GAAAkH,KAAA,eACAmI,aAAAA,EACAC,SAAA6J,EAAAnY,GACAoN,OAAA,WAEA7N,KAAA,SAAAC,GAEA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,QAGAE,GAAA4S,KAAA9S,EAAAjF,IAAAuM,QAAAtH,EAAAsH,QACAvN,EAAA2L,SAAA,UAAA,qBAIA,YAAAoC,EAAAK,QAEApO,EAAAkH,KAAA,eACAoS,cAAAvL,EAAAzC,KACA8C,OAAA,QAEA7N,KAAA,SAAAC,GACA,GAAAyF,GAAApF,KAAAC,MAAAN,EAAAyF,QAGAE,GAAA4S,KAAA9S,EAAAjF,IAAAiF,EACAE,EAAA4S,KAAA9S,EAAAjF,IAAAuM,QAAAtH,EAAAsH,QACAvN,EAAA2L,SAAA,UAAA,sBAGA,WACAjK,QAAAC,IAAA,uBAAA,GAAA6I,YAOAtB,aAAA,kBCxGA,WACA/J,QAAAC,OAAA,gBAAA,eAAA,UAAA,YAEAgF,UAAA,eAAA,WACA,OACAO,SAAA,IACAxC,YAAA,0CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,GACAoG,EAAA5E,QACA4E,EAAA0B,SACA1B,EAAAoT,WAAA,UAIApT,GAAAqT,eAEArT,EAAA2Q,SACAnW,MAAA,GACA8Y,OAAA,GACAC,GAAA,GACA1C,GAAA,GAEA,IAAAQ,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACAzX,MAAA,GACA8Y,OAAA,GACAC,GAAA,GACA1C,GAAA,QAEAzM,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,cACAD,KAAAA,IACA1G,KAAA,SAAAC,GACA2F,EAAA5E,KAAAV,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA5E,KAAA4L,EAAA5C,UAAApE,EAAA5E,IAEA4L,GAAAtF,MAAA1B,EAAA0B,OAEA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCnHA,WACA/J,QAAAC,OAAA,kBAAA,eAAA,UAAA,YAEAgF,UAAA,iBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,4CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,GACAoG,EAAA5E,QACA4E,EAAA0B,SACA1B,EAAAoT,WAAA,YAIApT,GAAAqT,eAEArT,EAAA2Q,SACAnW,MAAA,GACA8Y,OAAA,GACAC,GAAA,GACA1C,GAAA,GAEA,IAAAQ,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACAzX,MAAA,GACA8Y,OAAA,GACAC,GAAA,GACA1C,GAAA,QAEAzM,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,gBACAD,KAAAA,IACA1G,KAAA,SAAAC,GACA2F,EAAA5E,KAAAV,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA5E,KAAA4L,EAAA5C,UAAApE,EAAA5E,IAEA4L,GAAAtF,MAAA1B,EAAA0B,OAEA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCnHA,WACA/J,QAAAC,OAAA,oBAAA,eAAA,UAAA,YAEAgF,UAAA,mBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,8CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,GACAoG,EAAA5E,QACA4E,EAAA0B,SACA1B,EAAAoT,WAAA,WAIApT,GAAAqT,eAEArT,EAAA2Q,SACAnW,MAAA,GACAgZ,QAAA,GACAD,GAAA,GACA1I,OAAA,GACAgG,GAAA,GAEA,IAAAQ,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACAzX,MAAA,GACAgZ,QAAA,GACAD,GAAA,GACA1I,OAAA,GACAgG,GAAA,QAEAzM,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,eACAD,KAAAA,IACA1G,KAAA,SAAAC,GACA2F,EAAA5E,KAAAV,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA5E,KAAA4L,EAAA5C,UAAApE,EAAA5E,IAEA4L,GAAAtF,MAAA1B,EAAA0B,OAEA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCrHA,WACA/J,QAAAC,OAAA,mBAAA,eAAA,UAAA,YAEAgF,UAAA,kBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,6CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,GACAoG,EAAA5E,QACA4E,EAAA0B,SACA1B,EAAAoT,WAAA,aAIApT,GAAAqT,eAEArT,EAAA2Q,SACAnW,MAAA,GACAyN,OAAA,GACA4C,OAAA,GACAgG,GAAA,GACA4C,MAAA,GAEA,IAAApC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACAzX,MAAA,GACAyN,OAAA,GACA4C,OAAA,GACAgG,GAAA,OACA4C,MAAA,IAEArP,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,iBACAD,KAAAA,IACA1G,KAAA,SAAAC,GACA2F,EAAA5E,KAAAV,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,SAEAzS,EAAAqT,YAAA3Y,KAAAC,MAAAN,EAAAqZ,SACA1T,EAAAqT,YAAAzY,OAAA,EAAA,GACAC,GAAA,GAAAC,MAAA,IAGA,IAAA4X,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA5E,KAAA4L,EAAA5C,UAAApE,EAAA5E,IAEA4L,GAAAtF,MAAA1B,EAAA0B,OAEA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBC1HA,WACA/J,QAAAC,OAAA,gBAAA,eAAA,UAAA,UAAA,mBAEAgF,UAAA,eAAA,WACA,OACAO,SAAA,IACAxC,YAAA,0CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,YAAA,cAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAA0H,EAAAC,GACAvB,EAAAmH,WACAnH,EAAA0B,QAIA1B,GAAA2Q,SACAgD,YAAA,GACApM,aAAA,GACAqM,cAAA,GACAnG,YAAA,GACAd,YAAA,GACAC,YAAA,IAGA5M,EAAA6T,kBAAA,WACA7T,EAAA2Q,QAAAhE,YAGA3M,EAAA2Q,QAAAhE,YAAA,GAFA3M,EAAA2Q,QAAAhE,YAAA,IAIA3M,EAAA2Q,QAAA/D,cACA5M,EAAA2Q,QAAA/D,YAAA,IAEA5M,EAAAgS,YAAA8B,UAGA9T,EAAA+T,kBAAA,WACA/T,EAAA2Q,QAAA/D,YAGA5M,EAAA2Q,QAAA/D,YAAA,GAFA5M,EAAA2Q,QAAA/D,YAAA,IAIA5M,EAAA2Q,QAAAhE,cACA3M,EAAA2Q,QAAAhE,YAAA,IAEA3M,EAAAgS,YAAA8B,UAGA9T,EAAAgU,YAAA,WACAhU,EAAA2Q,QAAAgD,YAAA,GACA3T,EAAA2Q,QAAApJ,aAAA,GACAvH,EAAA2Q,QAAAiD,cAAA,GACA5T,EAAA2Q,QAAAlD,YAAA,GACAzN,EAAA2Q,QAAAhE,YAAA,GACA3M,EAAA2Q,QAAA/D,YAAA,GACA5M,EAAAgS,YAAA8B,SAGA,IAAAzC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAKA9R,EAAAiU,UAAA,SAAAvM,GAEA,GAAAwM,GAAA,GAAA7P,MAAAA,KAAA1J,MAAA+M,EAAA+F,cACA0G,EAAA,GAAA9P,KAEA,OAAA8P,IAAAD,GAOAlU,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACA0B,YAAA,GACApM,aAAA,GACAqM,cAAA,GACAnG,YAAA,GACA2G,iBAAA,GACAC,gBAAA,QAEAjQ,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UAEApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,cACAD,KAAAA,IACA1G,KAAA,SAAAC,GACA2F,EAAAmH,QAAAzM,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAAmH,QAAAH,EAAA5C,UAAApE,EAAAmH,OAEAH,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,QAMA1S,EAAAsU,WAAA,SAAApN,GACA3F,EAAA0F,WAAAC,EAAAlH,EAAAmH,UAIAnH,EAAA+B,UAAA,SAAAH,GACA2S,eAAAvS,UAAAJ,EAAA5B,EAAAyB,WAKAsB,aAAA,mBC9KA,WACA/J,QAAAC,OAAA,eAAA,eAAA,UAAA,UAAA,eAAA,eAEAgF,UAAA,cAAA,WACA,OACAO,SAAA,IACAxC,YAAA,yCACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,aAAA,YAAA,aAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAAD,EAAA2H,EAAAE,GACAxB,EAAAyB,UACAzB,EAAA0B,QAEA,IAAAgP,GAAAnU,IACAA,MAAAiY,aACA3Z,GAAA,GAAAC,MAAA,KACAD,GAAA,SAAAC,MAAA,WACAD,GAAA,SAAAC,MAAA,WAEAkF,EAAAyU,cAAA,SAAAzU,GACA,MAAA0Q,GAAA8D,YAGAxU,EAAAvF,QAAA,WAEA,MAAAd,GAAAc,SAEAuF,EAAA8B,WAAA,SAAA6J,GAEA,MAAA3L,GAAAvF,UAAAkR,GAAA7Q,OAIAkF,EAAA2Q,SACAC,OAAA,GACA8D,UAAA,GACA1G,YAAA,GACAvR,KAAA,GACAoU,GAAA,GAEA,IAAAQ,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACA0C,UAAA,GACAD,UAAA,GACA1G,YAAA,GACAvR,KAAA,GACAoU,GAAA,QAEAzM,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UAEApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,aACAD,KAAAA,IACA1G,KAAA,SAAAC,GAEA2F,EAAAyB,OAAA/G,KAAAC,MAAAN,EAAAyF,SAEAzF,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAAyB,OAAAuF,EAAA5C,UAAApE,EAAAyB,MAEAuF,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,QAMA1S,EAAA+B,UAAA,SAAAH,GACAJ,EAAAQ,UAAAJ,EAAA5B,EAAAyB,WAGAsB,aAAA,mBC1IA,WACA/J,QAAAC,OAAA,oBAAA,eAAA,UAAA,UAAA,iBAEAgF,UAAA,mBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,8CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,aAAA,eAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAAD,EAAAib,GACA5U,EAAA8I,YACA9I,EAAA0B,QAIA1B,GAAAvF,QAAA,WAEA,MAAAd,GAAAc,SAEAuF,EAAA8B,WAAA,SAAA6J,GACA,MAAA3L,GAAAvF,UAAAkR,GAAA7Q,OAGAkF,EAAA6U,YAAA,SAAAjM,EAAAnM,GACAmY,EAAA/L,eAAAD,EAAAnM,EAAAuD,EAAA8I,SAAA9I,EAAAvF,WACAL,KAAA,SAAAC,GACA2F,EAAAgS,YAAA8B,YAIA9T,EAAA2Q,SACAmE,QAAA,GACAC,gBAAA,GACA/L,YAAA,GACAgM,WAAA,GACAC,aAAA,IAGAjV,EAAAmR,gBAAA,WACAtJ,EAAA,2BAAAuJ,UAIA,IAAAC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACA6C,QAAA,GACAC,gBAAA,GACA/L,YAAA,GACAgM,WAAA,OACAC,aAAA,IAEA7Q,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,eACAD,KAAAA,EACAsI,YAAA,QACAhP,KAAA,SAAAC,GAEA2F,EAAA8I,SAAAzO,EAAAyF,QAAA4L,IAEArR,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA8I,SAAA9B,EAAA5C,UAAApE,EAAA8I,QAEA9B,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCxIA,WACA/J,QAAAC,OAAA,qBAAA,eAAA,UAAA,UAAA,iBAEAgF,UAAA,oBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,+CACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,aAAA,eAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAAD,EAAAib,GACA5U,EAAA8I,YACA9I,EAAA0B,QAIA1B,GAAAvF,QAAA,WAEA,MAAAd,GAAAc,SAEAuF,EAAA8B,WAAA,SAAA6J,GACA,MAAA3L,GAAAvF,UAAAkR,GAAA7Q,OAGAkF,EAAA6U,YAAA,SAAAvL,GACAsL,EAAAvL,gBAAAC,EAAAtJ,EAAA8I,SAAA9I,EAAAvF,WACAL,KAAA,SAAAC,GACA2F,EAAAgS,YAAA8B,YAIA9T,EAAA2Q,SACAuE,UAAA,GACAC,YAAA,GACA5L,WAAA,IAUAvJ,EAAAmR,gBAAA,WACAtJ,EAAA,2BAAAuJ,UAIA,IAAAC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACAiD,UAAA,OACAC,YAAA,GACA5L,WAAA,GACAyC,aAAA,GACAoJ,mBAAA,GACAnJ,cAAA,GACAoJ,mBAAA,GACAnJ,gBAAA,GACAoJ,kBAAA,GACAC,mBAAA,IAEAnR,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,eACAD,KAAAA,EACAsI,YAAA,SACAhP,KAAA,SAAAC,GACA2F,EAAA8I,SAAAzO,EAAAyF,QAAA0V,KAEAnb,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA8I,SAAA9B,EAAA5C,UAAApE,EAAA8I,QAEA9B,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCjJA,WACA/J,QAAAC,OAAA,wBAAA,eAAA,UAAA,UAAA,iBAEAgF,UAAA,uBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,kDACA0C,SACAzC,YAAA,SAAA,OAAA,gBAAA,UAAA,UAAA,YAAA,eAAA,SAAA+D,EAAAnG,EAAA0W,EAAAC,EAAAlS,EAAA1E,EAAAgb,GACA5U,EAAA8I,YACA9I,EAAA0B,QAIA1B,GAAAvF,QAAA,WAEA,MAAAd,YAAAc,SAEAuF,EAAA8B,WAAA,SAAA6J,GACA,MAAA3L,GAAAvF,UAAAkR,GAAA7Q,OAGAkF,EAAA6U,YAAA,SAAAvL,GACAsL,EAAAnL,mBAAAH,EAAAtJ,EAAA8I,UACA1O,KAAA,SAAAC,GACA2F,EAAAgS,YAAA8B,YAIA9T,EAAA2Q,SACApH,WAAA,GACAyL,WAAA,GACAS,iBAAA,GACAC,UAAA,GACAC,gBAAA,IAGA3V,EAAAmR,gBAAA,WACAtJ,EAAA,2BAAAuJ,UAIA,IAAAC,GAAAzX,EAAA0J,QAGA,KAAA,GAAAc,KAAApE,GAAA2Q,QACAvM,IAAAiN,KACArR,EAAA2Q,QAAAvM,GAAAiN,EAAAjN,GAKApE,GAAAsR,cACAtR,EAAAsR,WAAAC,YAAA,EACAvR,EAAAsR,WAAAE,QAAA,GAEAH,EAAAI,OACAzR,EAAAsR,WAAAC,YAAAF,EAAAI,MAEAJ,EAAAK,IACA1R,EAAAsR,WAAAE,QAAAH,EAAAK,GAGA1R,EAAA2R,iBAAA,SAAA3K,GACApN,EAAA0J,OAAA,OAAA0D,IAEAhH,EAAA4R,kBAAA,SAAA5K,GACApN,EAAA0J,OAAA,IAAA0D,IAIAhH,EAAA6R,oBAAA,SAAA7K,GACA,IAAA8K,QAAA9K,GACAA,EAAA+K,eAAAD,QAAA9K,EAAA8K,OACAlY,EAAA0J,OAAAwO,MAAA9K,EAAA8K,QAGAlY,EAAA0J,OAAAwO,MAAA,OAMA9R,EAAAgS,YAAA,GAAAzB,IACAkB,KAAAzR,EAAAsR,WAAAC,YACAlF,MAAArM,EAAAsR,WAAAE,QACAS,SACA1I,WAAA,GACAyL,WAAA,GACAS,iBAAA,OACAC,UAAA,GACAC,gBAAA,IAEAvR,OAAApE,EAAA2Q,UAGAuB,cAAA,EACAxQ,MAAA,EACAyQ,eACAC,YAAA,KAEAC,QAAA,SAAAC,EAAAtL,GAGA,GAAAlG,IACAyR,QAAAvL,EAAAyK,OAAA,GAAAzK,EAAAqF,QACAnP,MAAA8J,EAAAqF,QACAjI,OAAA4C,EAAA5C,SACA6N,QAAAjL,EAAAiL,UAGAjS,GAAA6R,oBAAA7K,EAAA5C,UACApE,EAAA2R,iBAAA3K,EAAAyK,QACAzR,EAAA4R,kBAAA5K,EAAAqF,SAEAxS,EAAAkH,KAAA,eACAD,KAAAA,EACAsI,YAAA,YACAhP,KAAA,SAAAC,GACA2F,EAAA8I,SAAAzO,EAAAyF,QAAA8V,QAEAvb,EAAAqH,OAAA1B,EAAA0B,OACApD,EAAAvB,UAAA,UAAA,GAAA,GAAA1C,EAAAqH,MAAA,WAAA,KAEA1B,EAAA0B,MAAArH,EAAAqH,MACA1B,EAAAwS,WAAAnY,EAAAoY,QAEA,IAAAC,GAAA1L,EAAA5C,SAAAoM,EAAA,UAAAxQ,EAAA8I,SAAA9B,EAAA5C,UAAApE,EAAA8I,QAEA9B,GAAAtF,MAAA1B,EAAA0B,OACA4Q,EAAAvL,QAAA2L,UAKA3P,aAAA,mBCvIA,WACA/J,QAAAC,OAAA,qBAEAgF,UAAA,iBAAA,WACA,OACAO,SAAA,IACAxC,YAAA,oDACAuC,SAAA,EACAG,OACAmX,WAAA,IACA7D,YAAA,IACAoB,WAAA,KAEAnX,YAAA,SAAA,OAAA,SAAA+D,EAAAnG,GACAmG,EAAA8V,WAAA,SAAAC,GAEA,GAAAjV,IACAkG,OAAA+O,EAEAlc,GAAAkH,KAAA,iBACAD,KAAAA,IACA1G,KAAA,SAAAC,GACAA,EAAAyF,QAEAE,EAAA2D,QAAAqO,YAAA8B,SAEAxV,QAAAvB,UAAA,QAAA,sBAAA,eAAA,UAKAgG,aAAA,wBC/BA,WACA/J,QAAAC,OAAA,mBAEAgF,UAAA,eAAA,WACA,OACAO,SAAA,IACAxC,YAAA,kDACAuC,SAAA,EACAG,OACAmX,WAAA,IACA7D,YAAA,KAEA/V,WAAA,aACA8G,aAAA","file":"app.js","sourcesContent":["(function() {\n    angular.module('serverCP', ['routes', 'Data', 'Graphs', 'graphsDirective', 'authCtrl', 'ordersCtrl','navbar','ordersTable','membersCtrl','membersTable','activationsCtrl','activationsTable','logsCtrl','versionsCtrl','graphViewCtrl','reportingCtrl'])\n\n\t.run(function($http, $httpParamSerializerJQLike) {\n\t\t$http.defaults.transformRequest.unshift($httpParamSerializerJQLike);\t  \n\t})\n\t\n\t.config(function ($httpProvider) {\n\t\t// passthru auth\n\t    $httpProvider.defaults.withCredentials = true;\n\t})\n\t\n\t// check for session on start\n    .run(function ($rootScope, $location, Data) {\n        $rootScope.$on(\"$routeChangeStart\", function (event, next, current) {\n            $rootScope.authenticated = false;\n            Data.get('getSessionState').then(function (results) {\n                if (results.uid) {\n                    $rootScope.authenticated = true;\n                    $rootScope.uid = results.uid;\n                    $rootScope.name = results.name;\n                    $rootScope.email = results.email;\n\n\t\t\t\t\t$rootScope.appList = JSON.parse(results.appList);\n\t\t\t\t\t$rootScope.appList.splice(0, 0, {\n\t\t\t\t\t\tid: '', title: ''\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t$rootScope.nums = {\n\t\t\t\t\t\ttweets: results.num_tweets,\n\t\t\t\t\t\tfeedback: results.num_feedback,\n\t\t\t\t\t\tlogs: results.num_logs\n\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t$rootScope.logout = function () {\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\tconsole.log('logout');\n\t\t\t\t        Data.get('logout').then(function (results) {\n\t\t\t\t            //Data.toast(results);\n\t\t\t\t            $location.path('/login');\n\t\t\t\t        });\n\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\t// Redirect http://url/ to dashboard, unless not logged in\n                    if (next.$$route && next.$$route.originalPath == \"/\") {\n\t\t\t\t\t\t$location.path('/dashboard');\n                    }\n                } else {\t\t\t\t\t\n                    var nextUrl = next.$$route.originalPath;\n                    if (nextUrl == '/signup' || nextUrl == '/login') {\n                    \t\n                    } else {\n                        $location.path(\"/login\");\n                    }\n                }\n            });\n        });\n    });\n})();","(function() {\n    angular.module('routes', ['ngRoute','dashboardCtrl'])\n\t\n\t.config(function($routeProvider, $locationProvider) {\t\t\n        $routeProvider\n\t\t\t.when('/login', {\n\t            title: 'Login',\n\t            templateUrl: 'partials/pages/login.html',\n\t            controller: 'authCtrl'\n\t        })\n            .when('/logout', { title: 'Logout', templateUrl: 'partials/pages/login.html', controller: 'authCtrl' })\n            .when('/signup', { title: 'Signup', templateUrl: 'partials/pages/signup.html', controller: 'authCtrl' })\n            .when('/dashboard', { title: 'Dashboard', templateUrl: 'partials/pages/dashboard.html', controller: 'dashboardCtrl' })\n            .when('/versions', { title: 'Versions', templateUrl: 'partials/pages/versions.html', controller: 'versionsCtrl', reloadOnSearch: false })\n            .when('/reports/:category?', { title: 'Reporing & Graphs', templateUrl: 'partials/pages/reporting.html', controller: 'reportingCtrl', reloadOnSearch: false })\n            .when('/orders/', { title: 'Orders', templateUrl: 'partials/pages/orders.html', controller: 'ordersCtrl', reloadOnSearch: false })\n            .when('/members', { title: 'Members', templateUrl: 'partials/pages/members.html', controller: 'membersCtrl', reloadOnSearch: false })\n            .when('/activations', { title: 'Activations', templateUrl: 'partials/pages/activations.html', controller: 'activationsCtrl', reloadOnSearch: false })\n            //.when('/feedback/:view?/:fbid?/', { title: 'Feedback', templateUrl: 'partials/pages/feedback.html', controller: 'feedbackCtrl', reloadOnSearch: false })\n\t\t\t// ^ if($routeParams.view) openFeedback($routeParams.view.fbid) I think...\n            .when('/logs', { title: 'Logs', templateUrl: 'partials/pages/logs.html', controller: 'logsCtrl', reloadOnSearch: false })\n            .when('/', { title: 'Loading', templateUrl: 'partials/pages/loading.html', controller: 'authCtrl', role: '0' })\n\t\t\t\n            .otherwise({\n                redirectTo: '/'\n            });\n\t});\n\t\n})();","'use strict';\n\n/*\n * AngularJS Toaster\n * Version: 0.4.4\n *\n * Copyright 2013 Jiri Kavulak.  \n * All Rights Reserved.  \n * Use, reproduction, distribution, and modification of this code is subject to the terms and \n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\n *\n * Author: Jiri Kavulak\n * Related to project of John Papa and Hans Fjällemark\n */\n\nangular.module('toaster', ['ngAnimate'])\n.service('toaster', ['$rootScope', function ($rootScope) {\n    this.pop = function (type, title, body, timeout, bodyOutputType) {\n        this.toast = {\n            type: type,\n            title: title,\n            body: body,\n            timeout: timeout,\n            bodyOutputType: bodyOutputType\n        };\n        $rootScope.$broadcast('toaster-newToast');\n    };\n\tthis.popSimple = function(type, title, body, timeout){\n        this.pop(type, title, body, timeout, 'trustedHtml');\n\t}\n\n    this.clear = function () {\n        $rootScope.$broadcast('toaster-clearToasts');\n    };\n}])\n.constant('toasterConfig', {\n    'limit': 0,                   // limits max number of toasts \n    'tap-to-dismiss': true,\n    'newest-on-top': true,\n    //'fade-in': 1000,            // done in css\n    //'on-fade-in': undefined,    // not implemented\n    //'fade-out': 1000,           // done in css\n    // 'on-fade-out': undefined,  // not implemented\n    //'extended-time-out': 1000,    // not implemented\n    'time-out': 5000, // Set timeOut and extendedTimeout to 0 to make it sticky\n    'icon-classes': {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning'\n    },\n    'body-output-type': '', // Options: '', 'trustedHtml', 'template'\n    'body-template': 'toasterBodyTmpl.html',\n    'icon-class': 'toast-info',\n    'position-class': 'toast-top-right',\n    'title-class': 'toast-title',\n    'message-class': 'toast-message'\n})\n.directive('toasterContainer', ['$compile', '$timeout', '$sce', 'toasterConfig', 'toaster',\nfunction ($compile, $timeout, $sce, toasterConfig, toaster) {\n    return {\n        replace: true,\n        restrict: 'EA',\n        link: function (scope, elm, attrs) {\n\n            var id = 0;\n\n            var mergedConfig = toasterConfig;\n            if (attrs.toasterOptions) {\n                angular.extend(mergedConfig, scope.$eval(attrs.toasterOptions));\n            }\n\n            scope.config = {\n                position: mergedConfig['position-class'],\n                title: mergedConfig['title-class'],\n                message: mergedConfig['message-class'],\n                tap: mergedConfig['tap-to-dismiss']\n            };\n\n            scope.configureTimer = function configureTimer(toast) {\n                var timeout = typeof (toast.timeout) == \"number\" ? toast.timeout : mergedConfig['time-out'];\n                if (timeout > 0)\n                    setTimeout(toast, timeout);\n            };\n\n            function addToast(toast) {\n                toast.type = mergedConfig['icon-classes'][toast.type];\n                if (!toast.type)\n                    toast.type = mergedConfig['icon-class'];\n\n                id++;\n                angular.extend(toast, { id: id });\n\n                // Set the toast.bodyOutputType to the default if it isn't set\n                toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type']\n                switch (toast.bodyOutputType) {\n                    case 'trustedHtml':\n                        toast.html = $sce.trustAsHtml(toast.body);\n                        break;\n                    case 'template':\n                        toast.bodyTemplate = toast.body || mergedConfig['body-template'];\n                        break;\n                }\n\n                scope.configureTimer(toast);\n\n                if (mergedConfig['newest-on-top'] === true) {\n                    scope.toasters.unshift(toast);\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\n                        scope.toasters.pop();\n                    }\n                } else {\n                    scope.toasters.push(toast);\n                    if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {\n                        scope.toasters.shift();\n                    }\n                }\n            }\n\n            function setTimeout(toast, time) {\n                toast.timeout = $timeout(function () {\n                    scope.removeToast(toast.id);\n                }, time);\n            }\n\n            scope.toasters = [];\n            scope.$on('toaster-newToast', function () {\n                addToast(toaster.toast);\n            });\n\n            scope.$on('toaster-clearToasts', function () {\n                scope.toasters.splice(0, scope.toasters.length);\n            });\n        },\n        controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n\n            $scope.stopTimer = function (toast) {\n                if (toast.timeout) {\n                    $timeout.cancel(toast.timeout);\n                    toast.timeout = null;\n                }\n            };\n\n            $scope.restartTimer = function (toast) {\n                if (!toast.timeout)\n                    $scope.configureTimer(toast);\n            };\n\n            $scope.removeToast = function (id) {\n                var i = 0;\n                for (i; i < $scope.toasters.length; i++) {\n                    if ($scope.toasters[i].id === id)\n                        break;\n                }\n                $scope.toasters.splice(i, 1);\n            };\n\n            $scope.remove = function (id) {\n                if ($scope.config.tap === true) {\n                    $scope.removeToast(id);\n                }\n            };\n        }],\n        template:\n        '<div  id=\"toast-container\" ng-class=\"config.position\">' +\n            '<div ng-repeat=\"toaster in toasters\" class=\"toast\" ng-class=\"toaster.type\" ng-click=\"remove(toaster.id)\" ng-mouseover=\"stopTimer(toaster)\"  ng-mouseout=\"restartTimer(toaster)\">' +\n              '<div ng-class=\"config.title\">{{toaster.title}}</div>' +\n              '<div ng-class=\"config.message\" ng-switch on=\"toaster.bodyOutputType\">' +\n                '<div ng-switch-when=\"trustedHtml\" ng-bind-html=\"toaster.html\"></div>' +\n                '<div ng-switch-when=\"template\"><div ng-include=\"toaster.bodyTemplate\"></div></div>' +\n                '<div ng-switch-default >{{toaster.body}}</div>' +\n              '</div>' +\n            '</div>' +\n        '</div>'\n    };\n}]);\n","angular.module('activationsCtrl', [])\r\n\t.controller('activationsCtrl', function ($scope, Graphs) {\r\n\r\n});","    angular.module('authCtrl', [])\r\n\t.controller('authCtrl', function ($scope, $rootScope, $routeParams, $location, $http, Data) {\r\n    //initially set those objects to null to avoid undefined error\r\n    $scope.login = {};\r\n    $scope.signup = {};\r\n    $scope.doLogin = function (form) {\r\n\t\t\r\n        Data.post('login', {\r\n            form: form,\r\n        }).then(function (results) {\r\n            //Data.toast(results);\r\n            $location.path('dashboard');\r\n        });\r\n    };\r\n    $scope.signup = {email:'',password:'',name:'',phone:'',address:''};\r\n    $scope.signUp = function (customer) {\r\n        Data.post('signUp', {\r\n            customer: customer\r\n        }).then(function (results) {\r\n            //Data.toast(results);\r\n            if (results.status == \"success\") {\r\n                $location.path('home');\r\n            }\r\n\t\t\telse\r\n\t\t\t\ttoaster.popSimple(\"error\",\"Error\",\"\"+results.message+\" results\",5000);\r\n        });\r\n    };\r\n});","angular.module('dashboardCtrl', ['timeMathFltr','appsTable','orderViewCtrl','memberFuncs','orderFuncs'])\r\n\t.controller('dashboardCtrl', function ($scope, $rootScope, $routeParams, $location, $http, Data, Graphs, $uibModal, memberFuncs, orderFuncs) {\r\n\t\tvar controller = this;\r\n\t\t\r\n\t\t// Set a few vars to avoid undefined errors, just in case.\r\n\t\t$scope.orders = {};\r\n\t\t$scope.total = {};\r\n\r\n\t\t$scope.getRecentOrders = function(orderID){\r\n\t\t\tData.post('getRecentOrders', {\r\n\t\t\t\torderID: orderID,\r\n\t\t\t}).then(function (results) {\r\n\t\t\t\t$scope.orders = JSON.parse(results.message);\r\n\t\t\t\t$scope.totalOrders = results.total;\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t$scope.appList = function(){\r\n\t\t\treturn $rootScope.appList;\r\n\t\t}\r\n\t\t$scope.getAppName = function(orderID){\r\n\t\t\tif($scope.appList())\r\n\t\t\t\treturn $scope.appList()[orderID].title;\r\n\t\t\t\r\n\t\t\telse \r\n\t\t\t\treturn \"\";\r\n\t\t};\r\n\t\t\r\n\t\t$scope.openOrder = function(orderID){\r\n\t\t\torderFuncs.viewOrder(orderID,$scope.orders);\r\n\t\t};\r\n});","angular.module('logsCtrl', ['ui.bootstrap','logsSystemTable','logsFailureTable','logsDeactTable','logsCIDTable','threeButtonBar'])\r\n\t.controller('logsCtrl', function ($scope, Graphs) {\r\n\t\t\r\n});","angular.module('membersCtrl', [])\r\n\t.controller('membersCtrl', function ($scope, Graphs) {\r\n\t\t$scope.graphs = {};\r\n\t\t\r\n\t\t$scope.getGraphs = function(graphs){\r\n\t\t\tGraphs.get(graphs).then(function(results){\r\n\t\t\t\t$scope.graphs = results;\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t$scope.viewGraph=Graphs.viewGraph;\r\n});","angular.module('ordersCtrl', [])\r\n\t.controller('ordersCtrl', function ($scope, Graphs) {\r\n\t\t$scope.graphs = {};\r\n\t\t\r\n\t\t$scope.getGraphs = function(graphs){\r\n\t\t\tGraphs.get(graphs).then(function(results){\r\n\t\t\t\t$scope.graphs = results;\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t$scope.viewGraph=Graphs.viewGraph;\r\n});","angular.module('reportingCtrl', ['timeMathFltr','ui.bootstrap','bootstrap.tabset','chart.js'])\r\n\t.controller('reportingCtrl', function ($scope, $rootScope, $routeParams, $location, $http, Data, Graphs, $timeout) {\r\n\t\t//$scope.graphs = [];\r\n\t\t\r\n\t\tif (!String.prototype.splice) {\r\n\t\t    /**\r\n\t\t     * {JSDoc}\r\n\t\t     *\r\n\t\t     * The splice() method changes the content of a string by removing a range of\r\n\t\t     * characters and/or adding new characters.\r\n\t\t     *\r\n\t\t     * @this {String}\r\n\t\t     * @param {number} start Index at which to start changing the string.\r\n\t\t     * @param {number} delCount An integer indicating the number of old chars to remove.\r\n\t\t     * @param {string} newSubStr The String that is spliced in.\r\n\t\t     * @return {string} A new string with the spliced substring.\r\n\t\t     */\r\n\t\t    String.prototype.splice = function(start, delCount, newSubStr) {\r\n\t\t        return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));\r\n\t\t    };\r\n\t\t}\r\n\t\t\r\n\t\t//var graphs = new Object();\r\n\r\n\t\tvar graphs = {\r\n\t\t\torders: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opw_6month',\r\n\t\t\t\t\tdesc: 'Weekly (<6 Month)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opw_1year',\r\n\t\t\t\t\tdesc: 'Weekly (<Year)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opm',\r\n\t\t\t\t\tdesc: 'Monthly (<2 Years)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opma_limited_1',\r\n\t\t\t\t\tdesc: 'Monthly (1-month vs Subs, 1 year)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opma_limited_2',\r\n\t\t\t\t\tdesc: 'Monthly (1-month vs Subs, 2 years)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opm_a_1month',\r\n\t\t\t\t\tdesc: 'Monthly Comparison (<2 years, 1-month)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opm_a_subscription',\r\n\t\t\t\t\tdesc: 'Monthly Comparison (<2 years, subscription)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// put this at the end, since it's more data intensive. When pthreads / Posix Threads are available, this won't be neccessary anymore. \r\n\t\t\t\t\tname: 'opma',\r\n\t\t\t\t\tdesc: 'Monthly (by app, <2 Years)'\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tactivations: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'apw',\r\n\t\t\t\t\tdesc: 'Activations per Week'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'fapw',\r\n\t\t\t\t\tdesc: 'Failed Activations per Week'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'apm',\r\n\t\t\t\t\tdesc: 'Activations per Month'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tversions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'opma',\r\n\t\t\t\t\tdesc: 'Orders per Month (by app)'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'vers_dist_pie',\r\n\t\t\t\t\tdesc: 'Version Distribution'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'vers_dist_bar',\r\n\t\t\t\t\tdesc: 'Version Distribution'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t\t\r\n\t\t/*\r\n\t\t$scope.prepareGraphs = function(selectedTab){\r\n\t\t\t//debugger;\r\n\t\t\t\r\n\t\t\tif($scope.selectedTab)\r\n\t\t\t\tselectedTab = $scope.selectedTab;\r\n\t\t\t\r\n\t\t\t$scope.graphs = [];\r\n\t\t\tangular.forEach(graphs[selectedTab], function (graph) {\r\n\t\t\t\t$scope.getGraphs(graph);\r\n\t\t\t});\r\n\t\t}\r\n\t\t// right now, this loads all graphs when the view is changed to active. Even if they have been loaded from the server before.\r\n\t\t$scope.getGraphs = function(graph){\t\r\n\t\t\tGraphs.getSingle(graph).then(function(results){\t\t\t\t\r\n\t\t\t\t// https://developers.google.com/chart/infographics/docs/overview#optimizations\r\n\t\t\t\tvar key = Object.keys(results)[0]\r\n\t\t\t\tvar graph = results[key];\r\n\t\t\t\t\r\n\t\t\t\tif($scope.graphs.length < 10)\r\n\t\t\t\t\tvar req = $scope.graphs.length;\r\n\t\t\t\telse\r\n\t\t\t\t\tvar req = ($scope.graphs.length - ($scope.graphs.length - 10));\r\n\r\n\t\t\t\tgraph.sm = graph.sm.splice(7, 0, req + '.');\r\n\t\t\t\tgraph.lg = graph.lg.splice(7, 0, req + '.');\r\n\t\t\t\t//$scope.graphs[key] = graph;\r\n\t\t\t\tif(graph.data){\r\n\t\t\t\t\tconsole.log('-- '+graph.desc);\r\n\t\t\t\t\tconsole.log(graph.data);\r\n\t\t\t\t\tconsole.log(graph.labels);\r\n\t\t\t\t\tconsole.log(graph.series);\r\n\t\t\t\t}\r\n\t\t\t\t$scope.graphs.push(graph);\r\n\t\t\t\t//debugger;\r\n\t\t\t});\r\n\t\t};\r\n\t\t$scope.test = function(){\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\t\r\n\t\t// Method in Graph factory to pop up graph - google graph API\r\n\t\t$scope.viewGraph=Graphs.viewGraph;\r\n\t\t\r\n\t\t//Chart.defaults.global.responsive = true;\r\n\t\tChart.defaults.global.scaleBeginAtZero = false;\r\n\t\tChart.defaults.global.legendTemplate = \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\";\r\n\r\n\t\t// need reference to chart\r\n\t\t$scope.chart = {};\r\n\t\t$scope.chart.options = {};\r\n\t\t$scope.chart.legend = false;\r\n\r\n\t\t$scope.$on('create', function (event, chart) {\r\n\t        $scope.chart = chart;\r\n\t\t\t$scope.chart.options.pointDotRadius = 0;\r\n\t\t\t//$scope.chart.options.showTooltips = false;\r\n\t    });\r\n\t\t$scope.$on('fullscreen_toggle', function (e, d) {\r\n\t\t\twindow.dispatchEvent(new Event('resize'));\r\n\t    });\r\n\t\t$scope.fullscreen = function (e) {\r\n\t        e.preventDefault();\r\n\r\n\t        var $this = e.currentTarget;\r\n\r\n\t\t\tvar i = $this.getElementsByTagName('i')[0].classList;\r\n\t\t\t\r\n\t\t\t//if panel, this should be .panel. Add if logic here so this is automated.\r\n\t\t\tvar thumb = $this.closest('.thumbnail');\r\n\t\t\t\r\n\t\t\t// setting to fullscreen\r\n\t\t\tif (i.contains('glyphicon-resize-full')){\r\n\t\t\t\ti.remove('glyphicon-resize-full');\r\n\t            i.add('glyphicon-resize-small');\r\n\t\t\t\t\r\n\t\t\t\tthumb.classList.add('panel-fullscreen');\r\n\r\n\t\t\t\t$scope.chart.legend = true;\r\n\t\t\t\t//debugger;\r\n\t\t\t\t\r\n\t\t\t\t//debugger;\r\n\t\t\t}\r\n\t\t\t// setting to small again\r\n\t\t\telse if(i.contains('glyphicon-resize-small')){\r\n\t            i.remove('glyphicon-resize-small');\r\n\t\t\t\ti.add('glyphicon-resize-full');\r\n\t\t\t\t\r\n\t\t\t\tthumb.classList.remove('panel-fullscreen');\r\n\r\n\t\t\t\t$scope.chart.legend = false;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t    $scope.$emit('fullscreen_toggle', []);\r\n\t\t}\r\n\t\t\r\n\t\t//Chart.defaults.global.colours = [\r\n\t\t$scope.colours = {\r\n\t\t\tbar: [\r\n\t\t\t\t{\r\n\t\t\t\t\tfillColor : \"rgba(0, 215, 219, 0.9)\",\r\n\t\t\t\t\tstrokeColor : \"rgba(220,220,220,0.8)\",\r\n\t\t\t\t\thighlightFill: \"rgba(0, 215, 219, 0.4)\",\r\n\t\t\t\t\thighlightStroke: \"rgba(220,220,220,1)\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t        fillColor: \"rgba(70,191,189,0.9)\",\r\n\t\t\t        strokeColor: \"rgba(70,191,189,0.8)\",\r\n\t\t\t        highlightFill: \"rgba(70,191,189,0.4)\",\r\n\t\t\t        highlightStroke: \"rgba(70,191,189,1)\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tline: [\r\n\t\t\t    { // neon blue\r\n\t\t            fillColor: \"rgba(0, 215, 219,0.2)\",\r\n\t\t            strokeColor: \"rgba(0, 215, 219,1)\",\r\n\t\t            pointColor: \"rgba(0, 215, 219,1)\",\r\n\t\t            pointStrokeColor: \"#fff\",\r\n\t\t            pointHighlightFill: \"#fff\",\r\n\t\t            pointHighlightStroke: \"rgba(151,187,205,1)\",\r\n\t\t\t    },/*\r\n\t\t\t    { // light grey\r\n\t\t\t        fillColor: \"rgba(220,220,220,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(220,220,220,1)\",\r\n\t\t\t        pointColor: \"rgba(220,220,220,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(220,220,220,0.8)\"\r\n\t\t\t    },\r\n\t\t\t    { // red\r\n\t\t\t        fillColor: \"rgba(247,70,74,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(247,70,74,1)\",\r\n\t\t\t        pointColor: \"rgba(247,70,74,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(247,70,74,0.8)\"\r\n\t\t\t    },\r\n\t\t\t    { // green\r\n\t\t\t        fillColor: \"rgba(70,191,189,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(70,191,189,1)\",\r\n\t\t\t        pointColor: \"rgba(70,191,189,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(70,191,189,0.8)\"\r\n\t\t\t    },\r\n\t\t\t    { // yellow\r\n\t\t\t        fillColor: \"rgba(253,180,92,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(253,180,92,1)\",\r\n\t\t\t        pointColor: \"rgba(253,180,92,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(253,180,92,0.8)\"\r\n\t\t\t    },\r\n\t\t\t    { // grey\r\n\t\t\t        fillColor: \"rgba(148,159,177,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(148,159,177,1)\",\r\n\t\t\t        pointColor: \"rgba(148,159,177,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(148,159,177,0.8)\"\r\n\t\t\t    },\r\n\t\t\t    { // dark grey\r\n\t\t\t        fillColor: \"rgba(77,83,96,0.2)\",\r\n\t\t\t        strokeColor: \"rgba(77,83,96,1)\",\r\n\t\t\t        pointColor: \"rgba(77,83,96,1)\",\r\n\t\t\t        pointStrokeColor: \"#fff\",\r\n\t\t\t        pointHighlightFill: \"#fff\",\r\n\t\t\t        pointHighlightStroke: \"rgba(77,83,96,1)\"\r\n\t\t\t    }\r\n\t\t\t]\r\n\t\t}\r\n\t\t\r\n\t\t$scope.onClick = function (points, evt) {\r\n\t\t    console.log(points, evt);\r\n\t\t  };//*/\r\n});","angular.module('versionsCtrl', ['timeMathFltr','ui.bootstrap','versionsAppTable','versionsGameTable','versionsUnknownTable'])\r\n\t.controller('versionsCtrl', function ($scope, $rootScope, $routeParams, $location, $http, Data, Graphs) {\r\n\t\t$scope.graphs = {};\r\n\t\t\r\n\t\t$scope.getGraphs = function(graphs){\r\n\t\t\tGraphs.get(graphs).then(function(results){\r\n\t\t\t\t$scope.graphs = results;\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t// Method in Graph factory to pop up graph\r\n\t\t$scope.viewGraph=Graphs.viewGraph;\r\n});","(function() {\n    angular.module('navbar', [])\n\n    .directive('renderNavbar', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/header/navbar.html',\n\t\t\tcontroller: ['$scope', '$location', function($scope, $location) {\t\n\t\t\t\t$scope.isActive = function (viewLocation) {\n\t\t\t\t\t//console.log(\"$location.path: (\"+$location.path()+\") and viewLocation: (\"+viewLocation+\") and URL: (\"+$location.url()+\")\");\n\t\t\t\t\treturn $location.path().indexOf(viewLocation) == 0;\n\t\t\t\t};\n\t\t\t}],\n\t\t\tcontrollerAs: 'navbarCtrl'\n        };\n    });\t\t\n\t\n\n})();","(function() {\n\t'use strict';\n\n\tangular.module('bootstrap.tabset', [])\n\t.directive('tabset', function () {\n\t  return {\n\t\t  restrict: 'E',\n\t\t  replace: true,\n\t\t  transclude: true,\n\t\t  scope: {\n\t\t\t  tabsType: '@'\n\t\t  },\n\t\t  link: function(scope, element, attrs, tabsetController) {\n\t\t\t  scope.tabsType = attrs.tabsType;\n\t\t  },\n\t\t  controller: function($scope, $location, $routeParams, Graphs) {\n\t\t\t\t$scope.templateUrl = '';\n\t\t\t\tvar tabs = $scope.tabs = [];\n\t\t\t\tvar controller = this;\n\n\t\t\t\tvar currentTab = $location.search()[$scope.tabsType];\n\n\t\t\t\tthis.selectTab = function (tab) {\t\t\t\t\n\t\t\t\t\tangular.forEach(tabs, function (tab) {\n\t\t\t\t\t//\tdebugger;\n\t\t\t\t\t\ttab.selected = false;\n\t\t\t\t\t});\n\t\t\t\t\ttab.selected = true;\n\t\t\t\t\ttab.$parent.$parent.selectedTab = tab.title.toLowerCase();\n\t\t\t\t\t\n\t\t\t\t};\n\n\t\t\t\tthis.setTabTemplate = function (templateUrl) {\n\t\t\t\t\t$scope.templateUrl = templateUrl;\n\t\t\t\t}\n\n\t\t\t\tthis.addTab = function (tab) {\n\t\t\t\t\tif (tabs.length == 0) {\n\t\t\t\t\t\tcontroller.selectTab(tab);\n\t\t\t\t\t}\n\t\t\t\t\ttabs.push(tab);\n\t\t\t\t\tif(currentTab && tab.title.toLowerCase() === currentTab){\n\t\t\t\t\t\tcontroller.selectTab(tab);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t$scope.viewGraph=Graphs.viewGraph;\n\t\t  },\n\t\t  template:\n\t\t\t  '<div class=\"row-fluid\">' +\n\t\t\t\t  '<div class=\"row-fluid\">' +\n\t\t\t\t    '<div class=\"nav nav-tabs\" ng-transclude></div>' +\n\t\t\t\t  '</div>' +\n\t\t\t\t  '<div class=\"row-fluid\">' +\n\t\t\t\t    '<ng-include src=\"templateUrl\">' +\n\t\t\t\t  '</ng-include></div>' +\n\t\t\t  '</div>'\n\t  };\n\t})\n\t.directive('tab', ['$location', function (location) {\n\t  return {\n\t\t  restrict: 'E',\n\t\t  replace: true,\n\t\t  require: '^tabset',\n\t\t  scope: {\n\t\t\ttitle: '@',\n\t\t\ttemplateUrl: '@'\n\t\t  },\n\t\t  link: function(scope, element, attrs, tabsetController) {\n\t\t\t  tabsetController.addTab(scope);\n\t\t\t\n\t\t\t  scope.select = function () {\n\t\t\t\t  // change URL param to fit current tab\n\t\t\t\t  if(scope.$parent.$parent.tabsType)\n\t\t\t\t\t  location.search(scope.$parent.$parent.tabsType, scope.title.toLowerCase());\n\n\t\t\t\t  tabsetController.selectTab(scope);\n\t\t\t  }\n\n\t\t\t  scope.$watch('selected', function () {\n\t\t\t\t  if (scope.selected) {\n\t\t\t\t    tabsetController.setTabTemplate(scope.templateUrl);\n\t\t\t\t  }\n\t\t\t  });\n\t\t  },\n\t\t  template:\n\t\t\t  '<li ng-class=\"{active: selected}\">' +\n\t\t\t\t  '<a href=\"\" ng-click=\"select()\">{{ title }}</a>' +\n\t\t\t  '</li>'\n\t\t};\n\t}]);\n\n})();","(function() {\n    angular.module('timeMathFltr', [])\n\t\n\t.filter('timeSince', function(){\n\t\treturn function(time){\n\t\t\tswitch (typeof time) {\n\t\t\t    case 'number': break;\n\t\t\t    case 'string': \n\t\t\t\t\ttime = +new Date(time.replace(/-/g, '/'));\n\t\t\t\t\ttime = +new Date(time); \n\t\t\t\t\tbreak;\n\t\t\t    case 'object': if (time.constructor === Date) time = time.getTime(); break;\n\t\t\t    default: time = +new Date();\n\t\t\t}\n\t\t\tvar time_formats = [\n\t\t\t    [60, 'seconds', 1], // 60\n\t\t\t    [120, '1 minute ago', '1 minute from now'], // 60*2\n\t\t\t    [3600, 'minutes', 60], // 60*60, 60\n\t\t\t    [7200, '1 hour ago', '1 hour from now'], // 60*60*2\n\t\t\t    [86400, 'hours', 3600], // 60*60*24, 60*60\n\t\t\t    [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n\t\t\t    [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n\t\t\t    [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2\n\t\t\t    [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n\t\t\t    [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2\n\t\t\t    [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n\t\t\t    [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2\n\t\t\t    [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n\t\t\t    [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2\n\t\t\t    [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n\t\t\t];\n\t\t\tvar seconds = (+new Date() - time) / 1000,\n\t\t\t    token = 'ago', list_choice = 1;\n\n\t\t\tif (seconds == 0) {\n\t\t\t    return 'Just now'\n\t\t\t}\n\t\t\tif (seconds < 0) {\n\t\t\t    seconds = Math.abs(seconds);\n\t\t\t    token = 'from now';\n\t\t\t    list_choice = 2;\n\t\t\t}\n\t\t\tvar i = 0, format;\n\t\t\twhile (format = time_formats[i++])\n\t\t\t    if (seconds < format[0]) {\n\t\t\t        if (typeof format[2] == 'string')\n\t\t\t            return format[list_choice];\n\t\t\t        else\n\t\t\t            return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;\n\t\t\t    }\n\t\t\treturn time;\n\t\t};\n\t})\n\n\t.filter('cleanDt', function(){\n\t\treturn function(input){\n\t\t    return new Date(input);\n\t\t};\n\t});\n})();","(function() {\n    angular.module('Data', ['toaster'])\n\t\n\t.factory(\"Data\", ['$http', 'toaster',\n\t\tfunction ($http, toaster) {\n\t\t\t\n\t\t    var serviceBase = 'API/';\n\n\t\t\tvar timestamp = new Date().getTime();\n\t\t\ttimestamp = '?&i='+timestamp;\n\t\t\t\n\t\t    var obj = {};\n\t\t    obj.toast = function (data) {\n\t\t        toaster.pop(data.status, \"\", data.message, 5000, 'trustedHtml');\n\t\t        toaster.pop(data.status, \"Get\", JSON.stringify(data.server.get_params), 5000, 'trustedHtml');\n\t\t        toaster.pop(data.status, \"Post\", JSON.stringify(data.server.post_params), 5000, 'trustedHtml');\n\t\t    }\n\t\t\tobj.toastMsg = function (state,msg){\n\t\t        toaster.pop(state, \"\", msg, 2000, 'trustedHtml');\n\t\t\t}\n\t\t    obj.get = function (q) {\n\t\t        return $http.get(serviceBase + q + timestamp).then(function (results) {\n\t\t\t\t\t//console.log(\"get: \" + JSON.stringify(results.data));\n\t\t            return results.data;\n\t\t        });\n\t\t    };\n\t\t\t\n\t\t    obj.post = function (q, object) {\t\t\t\n\t\t\t\treturn $http({\n\t\t            method: 'POST',\n\t\t\t\t    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n\t\t\t\t\turl: serviceBase + q + timestamp,\n\t\t\t\t\tdata: object \n\t\t\t\t}).catch(function(e){\n\t\t\t\t\tconsole.log(\"POST failure\",e);\n\t\t\t\t\ttoaster.popSimple(\"error\",\"Server Error\",\"Task request failed!\",5000);\n\t\t\t\t}).then(function (results) {\n\t\t\t\t\tif(results.data && results.data.status == \"success\"){\t\t\t\t\t\n\t\t\t\t\t\treturn results.data;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(results.status != 200){\n\t\t\t\t\t\t\ttoaster.popSimple(\"error\",results.data.taskID+\" error\",\"Unexpected server error: \"+results.status,5000);\n\t\t\t\t\t\t\tconsole.error(\"Unexpected server response HTTP\"+results.status);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t\tif(results.data.code == 401){\n\t\t\t\t\t\t\t\t//toaster.popSimple(\"error\",\"Authentication Error\",results.data.message,5000);\n\t\t\t\t\t\t\t\tconsole.error(\"Task Request Failed: \"+results.data.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"error\",results.data.taskID+\" task error\",results.data.message,5000);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsole.error(\"Response: \"+JSON.stringify(results.data));\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\treturn results.data;\n\t\t\t\t\t}\n\t\t        });\n\t\t    };\n\t\t    obj.put = function (q, object) {\n\t\t        return $http.put(serviceBase + q, object).then(function (results) {\n\t\t\t\t\tconsole.log(\"put: \" + JSON.stringify(results.data));\n\t\t\t\t\t\n\t\t            return results.data;\n\t\t        });\n\t\t    };\n\t\t    obj.delete = function (q) {\n\t\t        return $http.delete(serviceBase + q).then(function (results) {\n\t\t            return results.data;\n\t\t        });\n\t\t    };\n\n\t\t    return obj;\n\t\t}\n\t])\n\t\n})();","(function() {\n    angular.module('Graphs', ['Data'])\n\t\n\t.factory(\"Graphs\", ['Data', '$uibModal',\n\t\tfunction(Data, $uibModal){\n\t\t\tvar obj = {};\n\t\t\tobj.get = function(graphs){\t\t\t\n\t\t\t\treturn Data.post('getGraphs', {\n\t\t\t\t\tform: {\n\t\t\t\t\t\tgraph_ids:graphs\n\t\t\t\t\t},\n\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\treturn JSON.parse(results.message);\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.getSingle = function(graph){\n\t\t\t\treturn Data.post('getGraphs', {\n\t\t\t\t\tform: {\n\t\t\t\t\t\tgraph_ids:graph.name\n\t\t\t\t\t},\n\t\t\t\t\tgraph_desc: graph.desc\n\t\t\t\t}).then(function (results) {\n\t\t\t\t\tvar msg = JSON.parse(results.message);\n\t\t\t\t\tmsg[results.server.post_params.form.graph_ids].desc = results.server.post_params.graph_desc;\n\t\t\t\t\t\n\t\t\t\t\treturn msg;\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.viewGraph = function(graphURL,graphLabel){\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/graphView.html',\n\t\t\t\t\tcontroller: 'graphViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\tgraphURL: function (){\n\t\t\t\t\t\t\treturn graphURL;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgraphLabel: function (){\n\t\t\t\t\t\t\treturn graphLabel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn obj;\n\t\t}\n\t])\n\t\n})();","(function() {\n    angular.module('memberFuncs', ['Data'])\n\t\n\t.factory(\"memberFuncs\", ['Data', '$uibModal',\n\t\tfunction(Data, $uibModal){\n\t\t\tvar obj = {};\n\t\t\tobj.get = function(params){\t\n\t\t\t\tconsole.log(\"-- get function\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t};\n\t\t\tobj.viewMember = function(memberID,members){\n\t\t\t\t//console.log(\"view member function for ID: \"+memberID);\n\t\t\t\tvar columns = {};\n\n\t\t\t\tif(members && memberID){\n\t\t\t\t\tfor (var i = 0, len = members.length; i < len; i++) {\n\t\t\t\t\t    if (members[i].member_id === memberID) {\n\t\t\t\t\t\t\tvar columns = members[i];\n\t\t\t\t\t        break;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tif(!columns.member_email){\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t//console.log(\"don't have data for memberID, won't pass on column data\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!memberID){\n\t\t\t\t\t// prepare for new memberID\n\t\t\t\t\tmemberID = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// open modal\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/memberView.html',\n\t\t\t\t\tcontroller: 'memberViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\tmember: function () {\n\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmemberID: function (){\n\t\t\t\t\t\t\treturn memberID;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.rendered.then(function (result) {\n\t\t\t\t\t// needed to set height to scroll inside modal pane, and increase relative height of pane\n\t\t\t\t    $('.modal .modal-body').css('overflow-y', 'auto'); \n\t\t\t\t    $('.modal .modal-body').css('max-height', $(window).height() * 0.7);\n\t\t\t\t    $('.modal .modal-body').css('height', $(window).height() * 0.7);\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\tif(result.action === 'openOrder'){\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\t$scope.openOrder(result.data);\n\t\t\t\t\t}\n\t\t\t\t}, function () {\n\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\t\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\t])\n\t\n})();","(function() {\n    angular.module('orderFuncs', ['Data','memberFuncs'])\n\t\n\t.factory(\"orderFuncs\", ['Data', '$uibModal', 'memberFuncs', function(Data, $uibModal, memberFuncs){\n\t\t\tvar obj = {};\n\t\t\tobj.get = function(params){\t\n\t\t\t\tconsole.log(\"-- get function\");\n\t\t\t};\n\t\t\tobj.resendConfirmationEmail = function(orderID,memberID){\n\t\t\t\tvar viaIDtype \t= '';\n\t\t\t\tvar viaID \t\t= '';\n\t\t\t\t\n\t\t\t\tif(orderID){\n\t\t\t\t\tconsole.log(\"via orderID\");\n\t\t\t\t\tviaIDtype \t= 'orderID';\n\t\t\t\t\tviaID \t\t= orderID;\n\t\t\t\t}\n\t\t\t\telse if(memberID){\n\t\t\t\t\tconsole.log(\"via memberID\");\n\t\t\t\t\tviaIDtype \t= 'memberID';\n\t\t\t\t\tviaID \t\t= memberID;\n\t\t\t\t}\n//\t\t\t\tconsole.log(\"send post request to send activation email \"+viaID + \" and type: \" + viaIDtype);\n\t\t\t\t\n\t\t\t\tData.toastMsg(\"info\",\"Preparing request\");\n\t\t\t\t\n\t\t\t\tData.post('resendConfirmation', {\n\t\t\t\t\tviaID: \t\tviaID,\n\t\t\t\t\tviaIDType: \tviaIDtype\n\t\t\t\t})\n\t\t\t\t.then(function (results) {\t\n\t\t\t\t\tData.toastMsg(results.status,results.message);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t};\n\t\t\tobj.regenerateKey = function(orderID,memberID){\n\t\t\t\tvar viaIDtype \t= '';\n\t\t\t\tvar viaID \t\t= '';\n\t\t\t\t\n\t\t\t\tif(orderID){\n\t\t\t\t\tconsole.log(\"via orderID\");\n\t\t\t\t\tviaIDtype \t= 'orderID';\n\t\t\t\t\tviaID \t\t= orderID;\n\t\t\t\t}\n\t\t\t\telse if(memberID){\n\t\t\t\t\tconsole.log(\"via memberID\");\n\t\t\t\t\tviaIDtype \t= 'memberID';\n\t\t\t\t\tviaID \t\t= memberID;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn Data.post('regenerateKey', {\n\t\t\t\t\tviaID: \t\tviaID,\n\t\t\t\t\tviaIDType: \tviaIDtype\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.setDeactivated = function(orderID,memberID,value){\n\t\t\t\tvar viaIDtype \t= '';\n\t\t\t\tvar viaID \t\t= '';\n\t\t\t\t\n\t\t\t\tif(orderID){\n\t\t\t\t\tconsole.log(\"via orderID\");\n\t\t\t\t\tviaIDtype \t= 'orderID';\n\t\t\t\t\tviaID \t\t= orderID;\n\t\t\t\t}\n\t\t\t\telse if(memberID){\n\t\t\t\t\tconsole.log(\"via memberID\");\n\t\t\t\t\tviaIDtype \t= 'memberID';\n\t\t\t\t\tviaID \t\t= memberID;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn Data.post('setDeactivated', {\n\t\t\t\t\tviaID: \t\t\tviaID,\n\t\t\t\t\tviaIDType: \t\tviaIDtype,\n\t\t\t\t\tsetDeactivated: value\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.viewOrder = function(orderID,orders){\n\t\t\t\t//console.log(\"view order function for ID: \"+orderID);\n\t\t\t\tvar columns = {};\n\n\t\t\t\tif(orders && orderID){\n\t\t\t\t\tfor (var i = 0, len = orders.length; i < len; i++) {\n\t\t\t\t\t    if (orders[i].order_id === orderID) {\n\t\t\t\t\t\t\tvar columns = orders[i];\n\t\t\t\t\t        break;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tif(!columns.business){\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t//console.log(\"don't have data for orderID, won't pass on column data\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!orderID){\n\t\t\t\t\t// prepare for new orderID\n\t\t\t\t\torderID = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// open modal\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/orderView.html',\n\t\t\t\t\tcontroller: 'orderViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\torder: function () {\n\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t},\n\t\t\t\t\t\torderID: function (){\n\t\t\t\t\t\t\treturn orderID;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.rendered.then(function (result) {\n\t\t\t\t\t// needed to set height to scroll inside modal pane, and increase relative height of pane\n\t\t\t\t    $('.modal .modal-body').css('overflow-y', 'auto'); \n\t\t\t\t    $('.modal .modal-body').css('max-height', $(window).height() * 0.7);\n\t\t\t\t    $('.modal .modal-body').css('height', $(window).height() * 0.7);\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\tif(result.action === 'viewMember'){\n\t\t\t\t\t\tmemberFuncs.viewMember(result.data,[]);\n\t\t\t\t\t}\n\t\t\t\t}, function () {\n\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\t\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn obj;\n\t\t}\n\t])\n\t\n})();","(function() {\n    angular.module('versionFuncs', ['Data', 'appVersionViewCtrl','gameVersionViewCtrl','unknownVersionViewCtrl'])\n\t\n\t.factory(\"versionFuncs\", ['Data', '$uibModal', function(Data, $uibModal){\n\t\t\tvar obj = {};\n\t\t\tobj.get = function(params){\t\n\t\t\t\tconsole.log(\"-- get function\");\n\t\t\t};\n\t\t\tobj.regenerateKey = function(hash_id,memberID){\n\t\t\t\tvar viaIDtype \t= '';\n\t\t\t\tvar viaID \t\t= '';\n\t\t\t\t\n\t\t\t\tif(hash_id){\n\t\t\t\t\tconsole.log(\"via hash_id\");\n\t\t\t\t\tviaIDtype \t= 'hash_id';\n\t\t\t\t\tviaID \t\t= hash_id;\n\t\t\t\t}\n\t\t\t\telse if(memberID){\n\t\t\t\t\tconsole.log(\"via memberID\");\n\t\t\t\t\tviaIDtype \t= 'memberID';\n\t\t\t\t\tviaID \t\t= memberID;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn Data.post('regenerateKey', {\n\t\t\t\t\tviaID: \t\tviaID,\n\t\t\t\t\tviaIDType: \tviaIDtype\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.viewAppVersion = function(hash_id,type,versions,app_list){\n\t\t\t\tvar columns = {};\n\n\t\t\t\tif(versions && hash_id){\n\t\t\t\t\tfor (var i = 0, len = versions.length; i < len; i++) {\n\t\t\t\t\t    if (versions[i].hash_id === hash_id) {\n\t\t\t\t\t\t\tvar columns = versions[i];\n\t\t\t\t\t        break;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tif(!columns.hash_string){\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t//console.log(\"don't have data for hash_id, won't pass on column data\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!hash_id){\n\t\t\t\t\t// prepare for new hash_id\n\t\t\t\t\thash_id = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// open modal\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/appVersionView.html',\n\t\t\t\t\tcontroller: 'appVersionViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\tappVersion: function () {\n\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t},\n\t\t\t\t\t\thash_id: function (){\n\t\t\t\t\t\t\treturn hash_id;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tapp_list: function (){\n\t\t\t\t\t\t\treturn app_list;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.rendered.then(function (result) {\n\t\t\t\t\t// needed to set height to scroll inside modal pane, and increase relative height of pane\n\t\t\t\t    $('.modal .modal-body').css('overflow-y', 'auto'); \n\t\t\t\t    $('.modal .modal-body').css('max-height', $(window).height() * 0.7);\n\t\t\t\t    $('.modal .modal-body').css('height', $(window).height() * 0.7);\n\t\t\t\t});\n\n\t\t\t\treturn modalInstance.result.then(function (result) {\n\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\tif(result.action === 'update' || result.action === 'create' || result.action === 'delete'){\t\t\t\t\t\t\n\t\t\t\t\t\tData.toastMsg(\"info\",\"Sending \"+result.action+\" request...\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t// return object so it can be accessed in caller\n\t\t\t\t\t\treturn Data.post('version', {\n\t\t\t\t\t\t\tupdateObject: \tresult.data,\n\t\t\t\t\t\t\tupdateID: \t\tresult.data.id,\n\t\t\t\t\t\t\tversionType: \tresult.versionType,\n\t\t\t\t\t\t\taction: \t\tresult.action\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function (results) {\n\t\t\t\t\t\t\t//return results, so server data is accessible in promise\n\t\t\t\t\t\t\tData.toastMsg(\"success\",\"App Version Saved\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t\tData.toastMsg(\"error\",\"Unhandled result!\");\n\t\t\t\t\t\t\n\t\t\t\t}, function () {\n\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\t\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.viewGameVersion = function(game_id,versions,app_list){\n\t\t\t\tvar columns = {};\n\n\t\t\t\tif(versions && game_id){\n\t\t\t\t\tfor (var i = 0, len = versions.length; i < len; i++) {\n\t\t\t\t\t    if (versions[i].game_id === game_id) {\n\t\t\t\t\t\t\tvar columns = versions[i];\n\t\t\t\t\t        break;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tif(!columns.vers_bytes){\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t//console.log(\"don't have data for game_id, won't pass on column data\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!game_id){\n\t\t\t\t\t// prepare for new game_id\n\t\t\t\t\tgame_id = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// open modal\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/gameVersionView.html',\n\t\t\t\t\tcontroller: 'gameVersionViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\tgameVersion: function () {\n\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgame_id: function (){\n\t\t\t\t\t\t\treturn game_id;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tapp_list: function (){\n\t\t\t\t\t\t\treturn app_list;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.rendered.then(function (result) {\n\t\t\t\t\t// needed to set height to scroll inside modal pane, and increase relative height of pane\n\t\t\t\t    $('.modal .modal-body').css('overflow-y', 'auto'); \n\t\t\t\t    $('.modal .modal-body').css('max-height', $(window).height() * 0.7);\n\t\t\t\t    $('.modal .modal-body').css('height', $(window).height() * 0.7);\n\t\t\t\t});\n\n\t\t\t\treturn modalInstance.result.then(function (result) {\n\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\tif(result.action === 'update' || result.action === 'create' || result.action === 'delete'){\t\t\t\t\t\t\n\t\t\t\t\t\tData.toastMsg(\"info\",\"Sending \"+result.action+\" request...\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t// return object so it can be accessed in caller\n\t\t\t\t\t\treturn Data.post('version', {\n\t\t\t\t\t\t\tupdateObject: \tresult.data,\n\t\t\t\t\t\t\tupdateID: \t\tresult.data.id,\n\t\t\t\t\t\t\tversionType: \tresult.versionType,\n\t\t\t\t\t\t\taction: \t\tresult.action\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function (results) {\n\t\t\t\t\t\t\t//return results, so server data is accessible in promise\n\t\t\t\t\t\t\tData.toastMsg(\"success\",\"Game Version Saved\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t\tData.toastMsg(\"error\",\"Unhandled result!\");\n\t\t\t\t\t\t\n\t\t\t\t}, function () {\n\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\t\n\t\t\t\t});\n\t\t\t};\n\t\t\tobj.viewUnknownVersion = function(id,versions){\n\t\t\t\tvar columns = {};\n\n\t\t\t\tif(versions && id){\n\t\t\t\t\tfor (var i = 0, len = versions.length; i < len; i++) {\n\t\t\t\t\t    if (versions[i].id === id) {\n\t\t\t\t\t\t\tvar columns = versions[i];\n\t\t\t\t\t        break;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tif(!columns.vers_bytes){\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t//console.log(\"don't have data for id, won't pass on column data\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(!id){\n\t\t\t\t\t// prepare for new id\n\t\t\t\t\tid = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// open modal\n\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\tanimation: true,\n\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/unknownVersionView.html',\n\t\t\t\t\tcontroller: 'unknownVersionViewCtrl',\n\t\t\t\t\tsize: 'lg',\n\t\t\t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\tresolve: {\n\t\t\t\t\t\tunknownVersion: function () {\n\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tid: function (){\n\t\t\t\t\t\t\treturn id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodalInstance.rendered.then(function (result) {\n\t\t\t\t\t// needed to set height to scroll inside modal pane, and increase relative height of pane\n\t\t\t\t    $('.modal .modal-body').css('overflow-y', 'auto'); \n\t\t\t\t    $('.modal .modal-body').css('max-height', $(window).height() * 0.7);\n\t\t\t\t    $('.modal .modal-body').css('height', $(window).height() * 0.7);\n\t\t\t\t});\n\n\t\t\t\treturn modalInstance.result.then(function (result) {\n\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\tif(result.action === 'update'){\t\t\t\t\t\t\n\t\t\t\t\t\tData.toastMsg(\"info\",\"Sending \"+result.action+\" request...\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t// return object so it can be accessed in caller\n\t\t\t\t\t\treturn Data.post('version', {\n\t\t\t\t\t\t\tupdateObject: \tresult.data,\n\t\t\t\t\t\t\tupdateID: \t\tresult.data.id,\n\t\t\t\t\t\t\tversionType: \tresult.versionType,\n\t\t\t\t\t\t\taction: \t\tresult.action\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function (results) {\n\t\t\t\t\t\t\t//return results, so server data is accessible in promise\n\t\t\t\t\t\t\tData.toastMsg(\"success\",\"Unknown Version Saved\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t\tData.toastMsg(\"error\",\"Unhandled result!\");\n\t\t\t\t\t\t\n\t\t\t\t}, function () {\n\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\t\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn obj;\n\t\t}\n\t])\n\t\n})();","angular.module('appVersionViewCtrl', ['timeMathFltr','confirm'])\r\n\t.controller('appVersionViewCtrl', ['$scope', '$uibModalInstance', 'appVersion', 'hash_id', '$timeout', 'app_list', '$rootScope', function ($scope, $uibModalInstance, appVersion, hash_id, $timeout, app_list, $rootScope) {\r\n\t\t$scope.appVersion_original = appVersion;\r\n\t\t$scope.appVersion = Object.create(appVersion);\r\n\t\t$scope.appVersion.id = hash_id;\r\n\t\t$scope.app_list = app_list;\r\n\t\t$scope.newappVersion = \"Viewing App Version: \"\r\n\t\t$scope.saveLabel = \"Save\"\r\n\t\t$scope.saveAction = \"update\";\r\n\t\t$scope.versionType = \"app\";\r\n\t\t\r\n\t\t$scope.toggleActLabel = \"Deactivate\";\r\n\t\t\r\n\t\t// init section\r\n\t\tif(!$scope.appVersion.id){\r\n\t\t\t// must be creating a new appVersion\r\n\t\t\tdelete $scope.appVersion.id;\r\n\r\n\t\t\t$scope.saveLabel = \"Publish\";\r\n\t\t\t$scope.saveAction = \"create\";\r\n\r\n\t\t\t$scope.newappVersion = \"New App Version\";\r\n\t\t\t$scope.appVersion.added_by = $rootScope.uid;\r\n\t\t}\r\n\t\t$scope.appVersion_original = angular.copy($scope.appVersion);\r\n\t\t\r\n\t\tif($scope.appVersion.active == \"0\")\r\n\t\t\t$scope.toggleActLabel = \"Activate\";\r\n\t\t\t\t\r\n\t\t// functions\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.appVersion,\r\n\t\t\t\tversionType: $scope.versionType\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t$scope.toggleAct = function() {\r\n\t\t\tif($scope.appVersion.active == \"1\"){\r\n\t\t\t\t$scope.appVersion.active = \"0\";\r\n\t\t\t\t$scope.toggleActLabel = \"Activate\";\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t$scope.appVersion.active = \"1\";\r\n\t\t\t\t$scope.toggleActLabel = \"Deactivate\";\r\n\t\t\t}\r\n\t\t\t$scope.save();\r\n\t\t}\r\n\t\t$scope.delete = function(){\r\n\t\t\tvar result = {\r\n\t\t\t\taction: 'delete',\r\n\t\t\t\tdata: $scope.appVersion,\r\n\t\t\t\tversionType: $scope.versionType\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t\t}\r\n\t\t\r\n\t\t$scope.booleanActive = [\r\n\t\t\t{ id: '1', title: 'Yes'},\r\n\t\t\t{ id: '0', title: 'No'}\r\n\t\t];\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close events and add confirmation with option to cancel event\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'update'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'create'){\r\n\t\t\t\tmessage = \"Publish new version?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'delete'){\r\n\t\t\t\tmessage = \"WARNING: This action cannot be undone! Are you sure you want to delete this entry?\";\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n        $scope.revertForm = function() {\r\n\t\t\t$scope.appVersion = angular.copy($scope.appVersion_original);\r\n            $scope.myForm.$setPristine();\r\n        }\r\n\t\t\r\n\t\t$scope.onShow = function(){\t\t\t\r\n\t\t    $timeout(resize, 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('comments');\r\n\t\t}\r\n\t}\r\n]);","angular.module('appViewCtrl', ['timeMathFltr','confirm'])\r\n\t.controller('appViewCtrl', ['$scope', '$uibModalInstance', 'app', 'appID', 'available_engines', '$timeout', function ($scope, $uibModalInstance, app, appID, available_engines, $timeout) {\r\n\t\t\r\n\t\t// clone object, don't want to affect orginal. Use this later to send only changes to server, and not whole cluster. Smaller requests, more efficient.\r\n\t\t$scope.app = Object.create(app);\r\n\t\t$scope.app.id = appID;\r\n\t\t$scope.available_engines = available_engines;\r\n\t\t\r\n\t\t$scope.saveLabel = \"Save Application\"\r\n\t\t$scope.saveAction = \"save\";\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.app\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close actions and add warning with possibility to cancel\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tvar message = \"You are about to leave the edit view. Uncaught reason. Are you sure?\";\r\n\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'save'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n\t\t// init stuff here\r\n\t\t$scope.onShow = function(){\r\n\t\t    $timeout(resize, 0);\r\n\t\t\t\r\n\t\t\tif(!$scope.app.id){\r\n\t\t\t\t// must be creating a new app\r\n\t\t\t\tdelete $scope.app.id;\r\n\r\n\t\t\t\t$scope.saveLabel = \"Create Application\";\r\n\t\t\t\t$scope.saveAction = \"saveNew\";\r\n\r\n\t\t\t\t$scope.newApp = \"New Application\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('email_body');\r\n\t\t}\r\n\t}\r\n]);","angular.module('gameVersionViewCtrl', ['timeMathFltr','confirm'])\r\n\t.controller('gameVersionViewCtrl', ['$scope', '$uibModalInstance', 'gameVersion', 'game_id', '$timeout', 'app_list', '$rootScope', function ($scope, $uibModalInstance, gameVersion, game_id, $timeout, app_list, $rootScope) {\r\n\t\t$scope.gameVersion_original = gameVersion;\r\n\t\t$scope.gameVersion = Object.create(gameVersion);\r\n\t\t$scope.gameVersion.id = game_id;\r\n\t\t$scope.app_list = app_list;\r\n\t\t$scope.newgameVersion = \"Viewing Game Version: \"\r\n\t\t$scope.saveLabel = \"Save\"\r\n\t\t$scope.saveAction = \"update\";\r\n\t\t$scope.versionType = \"game\";\r\n\t\t\t\t\r\n\t\t// init section\r\n\t\tif(!$scope.gameVersion.id){\r\n\t\t\t// must be creating a new gameVersion\r\n\t\t\tdelete $scope.gameVersion.id;\r\n\r\n\t\t\t$scope.saveLabel = \"Publish\";\r\n\t\t\t$scope.saveAction = \"create\";\r\n\r\n\t\t\t$scope.newgameVersion = \"New Game Version\";\r\n\t\t\t$scope.gameVersion.added_by = $rootScope.uid;\r\n\t\t\t$scope.gameVersion.is_supported = '1';\r\n\t\t\t$scope.gameVersion.should_update = '0';\r\n\t\t\t$scope.gameVersion.should_redirect = '0';\r\n\t\t}\r\n\t\t$scope.gameVersion_original = angular.copy($scope.gameVersion);\r\n\t\t\r\n\t\tif($scope.gameVersion.active == \"0\")\r\n\t\t\t$scope.toggleActLabel = \"Activate\";\r\n\t\t\t\t\r\n\t\t// functions\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.gameVersion,\r\n\t\t\t\tversionType: $scope.versionType\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t$scope.delete = function(){\r\n\t\t\tvar result = {\r\n\t\t\t\taction: 'delete',\r\n\t\t\t\tdata: $scope.gameVersion,\r\n\t\t\t\tversionType: $scope.versionType\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t\t}\r\n\t\t\r\n\t\t$scope.booleanActive = [\r\n\t\t\t{ id: '1', title: 'Yes'},\r\n\t\t\t{ id: '0', title: 'No'}\r\n\t\t];\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close events and add confirmation with option to cancel event\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'update'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'create'){\r\n\t\t\t\tmessage = \"Publish new version?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'delete'){\r\n\t\t\t\tmessage = \"WARNING: This action cannot be undone! Are you sure you want to delete this entry?\";\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n        $scope.revertForm = function() {\r\n\t\t\t$scope.gameVersion = angular.copy($scope.gameVersion_original);\r\n            $scope.myForm.$setPristine();\r\n        }\r\n\t\t\r\n\t\t$scope.onShow = function(){\t\t\t\r\n\t\t    $timeout(resize, 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('game_vers_comments');\r\n\t\t}\r\n\t}\r\n]);","angular.module('graphViewCtrl', [])\r\n\t.controller('graphViewCtrl', ['$scope', '$uibModalInstance', 'graphURL', 'graphLabel', function ($scope, $uibModalInstance, graphURL, graphLabel) {\r\n\t\t\r\n\t\t$scope.graphURL = graphURL;\r\n\t\t$scope.graphLabel = graphLabel;\r\n\r\n\t    $scope.close = function () {\r\n\t\t\t$uibModalInstance.dismiss('close');\r\n\t    };\r\n\t}\r\n]);","angular.module('memberViewCtrl', ['timeMathFltr','confirm'])\r\n\t.controller('memberViewCtrl', ['$scope', '$uibModalInstance', 'member', 'memberID', '$timeout', 'Data','orderFuncs', function ($scope, $uibModalInstance, member, memberID, $timeout, Data, orderFuncs) {\r\n\r\n\t\t// clone object, don't want to affect orginal. Use this later to send only changes to server, and not whole cluster. Smaller requests, more efficient.\r\n\t\t$scope.member = member;\r\n\t\t$scope.member.id = memberID;\r\n\t\t\r\n\t\t$scope.saveLabel = \"Save Member\"\r\n\t\t$scope.saveAction = \"save\";\r\n\t\t$scope.newLabel = \"Member #\";\r\n\t\t\r\n\t\t$scope.activatedAction = \"Deactivate\";\r\n\t\t$scope.blacklistedAction = \"Lift Blacklist\";\r\n\t\t$scope.deactivatedMsg = '';\r\n\t\t$scope.blacklistedMsg = '';\r\n\t\t$scope.deactivated = false;\r\n\t\t$scope.blacklisted = false;\r\n\t\t\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.member\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t$scope.resendConfirmation = function(){\r\n\t\t\torderFuncs.resendConfirmationEmail(null,$scope.member.id);\r\n\t\t}\r\n\t\t$scope.regenerateKey = function(){\r\n\t\t\torderFuncs.regenerateKey(null,$scope.member.id)\r\n\t\t\t.then(function (results) {\r\n\t\t\t\t$scope.member.member_act_key \t= results.new_key;\r\n\t\t\t\t\r\n\t\t\t\tData.toastMsg(results.status,results.message);\r\n\t\t\t})\r\n\t\t\t\r\n\t\t}\r\n\t\t$scope.getUserDetails = function(){\r\n\t\t\tif($scope.member.id){\r\n\t\t\t\tif(!$scope.member.expiry_date){\r\n\t\t\t\t\t//console.log(\"getting member details\");\r\n\t\t\t\t\tData.post('getMemberDetails', {\r\n\t\t\t\t\t\tmemberID: \t$scope.member.id,\r\n\t\t\t\t\t\taction: 'get'\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(function (results) {\t\r\n\t\t\t\t\t\tvar message = JSON.parse(results.message);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tvar id = $scope.member.id;\r\n\t\t\t\t\t\t$scope.member = message.columns;\r\n\t\t\t\t\t\t$scope.member.id = id;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgetAccountDetails();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tgetAccountDetails();\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t$scope.isDeactivated = function(){\r\n\t\t\tif($scope.member.deactivated == 1){\r\n\t\t\t\t$scope.activatedAction = \"Reactivate\";\r\n\t\t\t\t$scope.deactivatedMsg = '<span class=\"glyphicon glyphicon-warning-sign\"></span> deactivated <span class=\"glyphicon glyphicon-warning-sign\"></span>';\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t$scope.activatedAction = \"Deactivate\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$scope.setDeactivated = function(value){\r\n\t\t\tif(value)\r\n\t\t\t\tData.toastMsg(\"info\",\"Deactivating...\");\r\n\t\t\telse\r\n\t\t\t\tData.toastMsg(\"info\",\"Reactivating...\");\r\n\t\t\t\r\n\t\t\torderFuncs.setDeactivated(null,$scope.member.id,value)\r\n\t\t\t.then(function (results){\r\n\t\t\t\tif(results.status == 'success'){\r\n\t\t\t\t\t$scope.deactivated = value;\r\n\t\t\t\t\tif(value)\r\n\t\t\t\t\t\t$scope.member.deactivated = 1;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t$scope.member.deactivated = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\t$scope.isDeactivated();\r\n\t\t\t\t\tData.toastMsg(\"success\",\"Saved\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.isBlacklisted = function(){\r\n\t\t\tif($scope.member.blacklisted == 1){\r\n\t\t\t\t$scope.blacklistedAction = \"Lift Blacklist\";\r\n\t\t\t\t$scope.blacklistedMsg = '<span class=\"glyphicon glyphicon-alert\"></span> BLACKLISTED <span class=\"glyphicon glyphicon-alert\"></span>';\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t$scope.blacklistedAction = \"Blacklisted\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$scope.toggleActivation = function(){\r\n\t\t\tif($scope.deactivated)\r\n\t\t\t\tvar setDeactivated = false;\r\n\t\t\telse\r\n\t\t\t\tvar setDeactivated = true;\r\n\t\t\t\r\n\t\t\tData.post('account', {\r\n\t\t\t\temail: \t\t\t$scope.member.member_email,\r\n\t\t\t\tdeactivated: \tsetDeactivated,\r\n\t\t\t\taction: 'updateActive'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\r\n\t\t\t\tif($scope.deactivated){\r\n\t\t\t\t\t$scope.deactivated \t= true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.deactivated = false;\r\n\t\t\t\t//Data.toastMsg(\"success\",\"Account details retrieved\");\r\n\t\t\t});\r\n\t\t}\r\n\t\tfunction getAccountDetails(){\r\n\t\t\tData.post('getAccountDetails', {\r\n\t\t\t\temail: \t\t$scope.member.member_email,\r\n\t\t\t\torderID: \t'0',\r\n\t\t\t\taction: 'get'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\r\n\t\t\t\t$scope.relatedOrders \t= message.relatedOrders;\r\n\t\t\t\t\r\n\t\t\t\t$scope.count \t\t\t= {};\r\n\t\t\t\t$scope.count.act \t\t= message.count.act;\r\n\t\t\t\t$scope.count.CID \t\t= message.count.CID;\r\n\t\t\t\t$scope.expiryDt\t\t\t= message.member_details.expiry;\r\n\t\t\t\tif(message.member_details.deactivated)\r\n\t\t\t\t\t$scope.deactivated = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.deactivated = false;\r\n\t\t\t\t\r\n\t\t\t\tif(message.member_details.blacklisted)\r\n\t\t\t\t\t$scope.blacklisted = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.blacklisted = false;\r\n\t\t\t\t\r\n\t\t\t\t$scope.comments\t\t\t=\tmessage.member_details.comments;\r\n\t            $scope.myComments \t\t= angular.copy($scope.comments);\r\n\t            $scope.myForm.$setPristine();\r\n\t\t\t\t\r\n\t\t\t\t$scope.isDeactivated();\r\n\r\n\t\t\t    $timeout(resize, 0);\r\n\t\t\t\t\r\n\t\t\t\t//Data.toastMsg(\"success\",\"Account details retrieved\");\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n        $scope.revertNotes = function() {\r\n            $scope.myComments = angular.copy($scope.comments);\r\n            $scope.myForm.$setPristine();\r\n        }\r\n\t\t$scope.saveNotes = function(){\r\n\t\t\tconsole.log(\"Saving notes: \"+$scope.myComments);\r\n\t\t\t\r\n\t\t\tData.post('updateComments', {\r\n\t\t\t\tmember_email: \t$scope.member.member_email,\r\n\t\t\t\tmember_comments: $scope.myComments,\r\n\t\t\t\ttarget: 'member',\r\n\t\t\t\taction: 'update'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\t\t\t\t\r\n\t\t\t\t$scope.comments = $scope.myComments;\r\n\t\t\t\t$scope.revertNotes();\r\n\t\t\t\tData.toastMsg(\"success\",\"Notes Updated\");\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.openOrder = function(orderID){\r\n\t\t\tvar result = {\r\n\t\t\t\taction: 'openingOrder',\r\n\t\t\t\tdata: orderID\r\n\t\t\t};\r\n\t\t\torderFuncs.viewOrder(orderID,$scope.orders);\r\n\t\t\t$uibModalInstance.close(result);\r\n\t\t}\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close actions and add warning with possibility to cancel\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tvar message = \"You are about to leave the edit view. Uncaught reason. Are you sure?\";\r\n\t\t\tvar shouldConfirm = true;\r\n\t\t\t\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'save'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse if (typeof reason === 'object'){\r\n\t\t\t\tshouldConfirm = false;\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"navOut\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tmessage = \"Uncaught reason\";\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (shouldConfirm && !confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n\t\t\r\n\t\t\r\n\t\t// init stuff here\r\n\t\t$scope.onShow = function(){\r\n\t\t    $timeout(resize, 0);\r\n\t\t\t\r\n\t\t\tif(!$scope.member.id){\r\n\t\t\t\t// must be creating a new order\r\n\t\t\t\tdelete $scope.member.id;\r\n\r\n\t\t\t\t$scope.saveLabel = \"Create Order\";\r\n\t\t\t\t$scope.saveAction = \"saveNew\";\r\n\r\n\t\t\t\t$scope.newLabel = \"New Manual Order\";\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('myComments');\r\n\t\t}\r\n\t}\r\n]);","angular.module('orderViewCtrl', ['timeMathFltr','confirm','orderFuncs'])\r\n\t.controller('orderViewCtrl', ['$scope', '$uibModalInstance', 'order', 'orderID', '$timeout', 'Data', 'orderFuncs', function ($scope, $uibModalInstance, order, orderID, $timeout, Data, orderFuncs) {\r\n\r\n\t\t// clone object, don't want to affect orginal. Use this later to send only changes to server, and not whole cluster. Smaller requests, more efficient.\r\n\t\t$scope.order = order;\r\n\t\t$scope.order.id = orderID;\r\n\t\t\r\n\t\t$scope.saveLabel = \"Save Order\"\r\n\t\t$scope.saveAction = \"save\";\r\n\t\t$scope.newLabel = \"Order #\";\r\n\t\t\r\n\t\t$scope.activatedAction = \"Deactivate\";\r\n\t\t$scope.deactivatedMsg = '';\r\n\t\t$scope.deactivated = false;\r\n\t\t\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.order\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t$scope.resendConfirmation = function(){\r\n\t\t\torderFuncs.resendConfirmationEmail($scope.order.id,null);\r\n\t\t}\r\n\t\t$scope.regenerateKey = function(){\r\n\t\t\torderFuncs.regenerateKey($scope.order.id,null)\r\n\t\t\t.then(function (results) {\r\n\t\t\t\t// update vars on page\r\n\t\t\t\t$scope.order.license \t\t\t= results.new_key;\r\n\t\t\t\t\r\n\t\t\t\tData.toastMsg(results.status,results.message);\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.setDeactivated = function(value){\r\n\t\t\tif(value)\r\n\t\t\t\tData.toastMsg(\"info\",\"Deactivating...\");\r\n\t\t\telse\r\n\t\t\t\tData.toastMsg(\"info\",\"Reactivating...\");\r\n\t\t\t\r\n\t\t\torderFuncs.setDeactivated($scope.order.id,null,value)\r\n\t\t\t.then(function (results){\r\n\t\t\t\tif(results.status == 'success'){\r\n\t\t\t\t\t$scope.deactivated = value;\r\n\t\t\t\t\tif(value)\r\n\t\t\t\t\t\t$scope.order.deactivated = 1;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t$scope.order.deactivated = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\t$scope.isDeactivated();\r\n\t\t\t\t\tData.toastMsg(\"success\",\"Saved\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.getUserDetails = function(){\t\t\t\r\n\t\t\tif($scope.order.id){\r\n\t\t\t\tif(!$scope.order.business){\r\n\t\t\t\t\t//console.log(\"getting order details\");\r\n\t\t\t\t\tData.post('getOrderDetails', {\r\n\t\t\t\t\t\torderID: \t$scope.order.id,\r\n\t\t\t\t\t\taction: 'get'\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(function (results) {\t\r\n\t\t\t\t\t\tvar message = JSON.parse(results.message);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tvar id = $scope.order.id;\r\n\t\t\t\t\t\t$scope.order = message.columns;\r\n\t\t\t\t\t\t$scope.order.id = id;\r\n\t\t\t\t\t\tgetAccountDetails();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tgetAccountDetails();\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\t$scope.viewMember = function(){\r\n\t\t\t// close, let parent call the function below\r\n\t\t\tvar result = {\r\n\t\t\t\taction: 'viewMember',\r\n\t\t\t\tdata: $scope.member_id\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t\t\t//memberFuncs.viewMember($scope.member_id,[]);\r\n\t\t}\r\n\t\t\r\n\t\t$scope.isDeactivated = function(){\r\n\t\t\tif($scope.deactivated){\r\n\t\t\t\t$scope.activatedAction = \"Reactivate\";\r\n\t\t\t\t$scope.deactivatedMsg = '<span class=\"glyphicon glyphicon-warning-sign\"></span> account deactivated!';\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t$scope.activatedAction = \"Deactivate\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t$scope.toggleActivation = function(){\r\n\t\t\tif($scope.deactivated)\r\n\t\t\t\tvar setDeactivated = false;\r\n\t\t\telse\r\n\t\t\t\tvar setDeactivated = true;\r\n\t\t\t\r\n\t\t\tData.post('account', {\r\n\t\t\t\temail: \t\t\t$scope.order.payer_email,\r\n\t\t\t\tdeactivated: \tsetDeactivated,\r\n\t\t\t\taction: 'updateActive'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\r\n\t\t\t\tif($scope.deactivated){\r\n\t\t\t\t\t$scope.deactivated \t= true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.deactivated = false;\r\n\t\t\t\t//Data.toastMsg(\"success\",\"Account details retrieved\");\r\n\t\t\t});\r\n\t\t}\r\n\t\tfunction getAccountDetails(){\r\n\t\t\tData.post('getAccountDetails', {\r\n\t\t\t\temail: \t\t$scope.order.payer_email,\r\n\t\t\t\torderID: \t$scope.order.id,\r\n\t\t\t\taction: 'get'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\t\t\t\t$scope.relatedOrders \t= message.relatedOrders;\r\n\t\t\t\t$scope.count \t\t\t= {};\r\n\t\t\t\t$scope.count.act \t\t= message.count.act;\r\n\t\t\t\t$scope.count.CID \t\t= message.count.CID;\r\n\t\t\t\t$scope.expiryDt\t\t\t= message.member_details.expiry;\r\n\t\t\t\t$scope.member_id\t\t= message.member_details.member_id;\r\n\r\n\t\t\t\tif(message.member_details.deactivated)\r\n\t\t\t\t\t$scope.deactivated = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.deactivated = false;\r\n\t\t\t\t\r\n\t\t\t\tif(message.member_details.blacklisted)\r\n\t\t\t\t\t$scope.blacklisted = true;\r\n\t\t\t\telse\r\n\t\t\t\t\t$scope.blacklisted = false;\r\n\t\t\t\t\r\n\t\t\t\t$scope.comments\t\t\t=\tmessage.member_details.comments;\r\n\t            $scope.myComments \t\t= angular.copy($scope.comments);\r\n\t            $scope.myForm.$setPristine();\r\n\t\t\t\t\r\n\t\t\t\t$scope.isDeactivated();\r\n\t\t\t\t\r\n\t\t\t    $timeout(resize, 0);\r\n\t\t\t\t\r\n\t\t\t\t//Data.toastMsg(\"success\",\"Account details retrieved\");\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n        $scope.revertNotes = function() {\r\n            $scope.myComments = angular.copy($scope.comments);\r\n            $scope.myForm.$setPristine();\r\n        }\r\n\t\t$scope.saveNotes = function(){\r\n\t\t\tconsole.log(\"Saving notes: \"+$scope.myComments);\r\n\t\t\t\r\n\t\t\tData.post('updateComments', {\r\n\t\t\t\tmember_email: \t$scope.order.payer_email,\r\n\t\t\t\tmember_comments: $scope.myComments,\r\n\t\t\t\ttarget: 'member',\r\n\t\t\t\taction: 'update'\r\n\t\t\t})\r\n\t\t\t.then(function (results) {\t\r\n\t\t\t\tvar message = JSON.parse(results.message);\r\n\t\t\t\t\r\n\t\t\t\t$scope.comments = $scope.myComments;\r\n\t\t\t\t$scope.revertNotes();\r\n\t\t\t\tData.toastMsg(\"success\",\"Notes Updated\");\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.openOrder = function(orderID){\r\n\t\t\tvar result = {\r\n\t\t\t\taction: 'viewingOtherOrder',\r\n\t\t\t\tdata: orderID\r\n\t\t\t};\r\n\t\t\torderFuncs.viewOrder(orderID,$scope.orders);\r\n\t\t\t$uibModalInstance.close(result);\r\n\t\t}\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close actions and add warning with possibility to cancel\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tvar message = \"You are about to leave the edit view. Uncaught reason. Are you sure?\";\r\n\t\t\tvar shouldConfirm = true;\r\n\t\t\t\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'save'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse if (typeof reason === 'object'){\r\n\t\t\t\tshouldConfirm = false;\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"navOut\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tshouldConfirm = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tmessage = \"Uncaught reason\";\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (shouldConfirm && !confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n\t\t\r\n\t\t\r\n\t\t// init stuff here\r\n\t\t$scope.onShow = function(){\r\n\t\t    $timeout(resize, 0);\r\n\t\t\t\r\n\t\t\tif(!$scope.order.id){\r\n\t\t\t\t// must be creating a new order\r\n\t\t\t\tdelete $scope.order.id;\r\n\r\n\t\t\t\t$scope.saveLabel = \"Create Order\";\r\n\t\t\t\t$scope.saveAction = \"saveNew\";\r\n\r\n\t\t\t\t$scope.newLabel = \"New Manual Order\";\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('myComments');\r\n\t\t}\r\n\t}\r\n]);","angular.module('unknownVersionViewCtrl', ['timeMathFltr','confirm'])\r\n\t.controller('unknownVersionViewCtrl', ['$scope', '$uibModalInstance', 'unknownVersion', 'id', '$timeout', function ($scope, $uibModalInstance, unknownVersion, id, $timeout) {\r\n\t\t$scope.unknownVersion_original = unknownVersion;\r\n\t\t$scope.unknownVersion = Object.create(unknownVersion);\r\n\t\t$scope.unknownVersion.id = id;\r\n\t\t$scope.newunknownVersion = \"Viewing Unknown Version: \"\r\n\t\t$scope.saveLabel = \"Save\"\r\n\t\t$scope.saveAction = \"update\";\r\n\t\t$scope.versionType = \"unknown\";\r\n\t\t\t\t\r\n\t\t$scope.unknownVersion_original = angular.copy($scope.unknownVersion);\r\n\t\t\r\n\t\tif($scope.unknownVersion.active == \"0\")\r\n\t\t\t$scope.toggleActLabel = \"Activate\";\r\n\t\t\t\t\r\n\t\t// functions\r\n\t    $scope.save = function () {\r\n\t\t\tvar result = {\r\n\t\t\t\taction: $scope.saveAction,\r\n\t\t\t\tdata: $scope.unknownVersion,\r\n\t\t\t\tversionType: $scope.versionType\r\n\t\t\t};\r\n\t\t\t$uibModalInstance.close(result);\r\n\t    };\r\n\t\t\r\n\t\t$scope.register = function () {\r\n\t\t\talert('not yet done')\r\n\t\t}\r\n\t\t\r\n\t\t$scope.booleanActive = [\r\n\t\t\t{ id: '1', title: 'Yes'},\r\n\t\t\t{ id: '0', title: 'No'}\r\n\t\t];\r\n\r\n\t    $scope.cancel = function () {\r\n\t\t\t$uibModalInstance.dismiss('cancel');\r\n\t    };\r\n\t\t\r\n\t\t// catch modal close events and add confirmation with option to cancel event\r\n\t\t$scope.$on('modal.closing', function(event, reason, closed) {\r\n\t\t\tif(typeof reason === 'object' && reason.action === 'update'){\r\n\t\t\t\tmessage = \"Save changes?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'create'){\r\n\t\t\t\tmessage = \"Publish new version?\";\r\n\t\t\t}\r\n\t\t\telse if(typeof reason === 'object' && reason.action === 'delete'){\r\n\t\t\t\tmessage = \"WARNING: This action cannot be undone! Are you sure you want to delete this entry?\";\r\n\t\t\t}\r\n\t\t\telse switch (reason){\r\n\t\t\t\t// clicked outside\r\n\t\t\t\tcase \"backdrop click\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// cancel button\r\n\t\t\t\tcase \"cancel\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t// escape key\r\n\t\t\t\tcase \"escape key press\":\r\n\t\t\t\t\tmessage = \"Any changes will be lost, are you sure?\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!confirm(message)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\t  \r\n\t\t$scope.autoExpand = function(e) {\r\n\t\t\tvar element = typeof e === 'object' ? e.target : document.getElementById(e);\r\n\t        //element.style.height = 'auto';\r\n\t        element.style.height = element.scrollHeight + 2 +'px';\r\n\t    };\r\n        $scope.revertForm = function() {\r\n\t\t\t$scope.unknownVersion = angular.copy($scope.unknownVersion_original);\r\n            $scope.myForm.$setPristine();\r\n        }\r\n\t\t\r\n\t\t$scope.onShow = function(){\t\t\t\r\n\t\t    $timeout(resize, 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction resize(){\r\n\t\t    $scope.autoExpand('comments');\r\n\t\t}\r\n\t}\r\n]);","(function() {\n    angular.module('confirm', [])\n    .directive('confirm', [function () {\n        return {\n            priority: 100,\n            restrict: 'A',\n            link: {\n                pre: function (scope, element, attrs) {\n                    var msg = attrs.confirm || \"Are you sure?\";\n\n                    element.bind('click', function (event) {\n                        if (!confirm(msg)) {\n                            event.stopImmediatePropagation();\n                            event.preventDefault;\n                        }\n                    });\n                }\n            }\n        };\n    }]);\t\n})();","(function() {\n    angular.module('graphsDirective', ['chart.js'])\n\n    .directive('renderGraphs', function() {\n        return {\n            restrict: 'E',\n\t        scope: {\n\t\t\t\tgraphKeys: '=?',\n\t\t\t\ttype: '=?',//can later be used to determine between chartJS and D3\n\t\t\t\twrap: '=?',\n\t\t\t},\n           // templateUrl: 'partials/subelements/graphs.html',\n\t\t\ttemplate: '<div ng-include=\"contentUrl\"></div>',\n\t        link: function(scope, element, attrs) {\n\t\t\t\tif(scope.wrap)\n\t\t            scope.contentUrl = 'partials/subelements/graphs_wrapped.html';\n\t\t\t\t\t\n\t\t\t\telse\n\t            \tscope.contentUrl = 'partials/subelements/graphs.html';\n\t\t\t},\n\t\t\tcontroller: ['$scope', '$location', 'Graphs', function($scope, $location, Graphs) {\t\n\t\t\t\tconsole.log(\"Getting graphs(\"+$scope.graphKeys+\")\");\n\t\t\t\t\n\t\t\t\tGraphs.get($scope.graphKeys).then(function(results){\n\t\t\t\t\t$scope.graphs = results;\n\t\t\t\t\tconsole.log($scope.graphs);\n\n\t\t\t\t\tfor(var key in results) { \n\t\t\t\t\t    var attr = results[key]; \n\t\t\t\t\t\tconsole.log('Chart (' + key + ') performance ' + attr.debug.time_taken);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$scope.shouldWrap = function(){\n\t\t\t\t\tif(!$scope.wrap)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\n\t\t\t\t\treturn $scope.wrap;\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\t$scope.fullscreen = function (e) {\n\t\t\t        e.preventDefault();\n\n\t\t\t        var $this = e.currentTarget;\n\n\t\t\t\t\tvar i = $this.getElementsByTagName('i')[0].classList;\n\t\t\t\n\t\t\t\t\t//if panel, this should be .panel. Add if logic here so this is automated.\n\t\t\t\t\tvar thumb = $this.closest('.thumbnail');\n\t\t\t\n\t\t\t\t\t// setting to fullscreen\n\t\t\t\t\tif (i.contains('glyphicon-resize-full')){\n\t\t\t\t\t\ti.remove('glyphicon-resize-full');\n\t\t\t            i.add('glyphicon-resize-small');\n\t\t\t\t\n\t\t\t\t\t\tthumb.classList.add('panel-fullscreen');\n\n\t\t\t\t\t\t$scope.chart.legend = true;\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\n\t\t\t\t\t\t//debugger;\n\t\t\t\t\t}\n\t\t\t\t\t// setting to small again\n\t\t\t\t\telse if(i.contains('glyphicon-resize-small')){\n\t\t\t            i.remove('glyphicon-resize-small');\n\t\t\t\t\t\ti.add('glyphicon-resize-full');\n\t\t\t\t\n\t\t\t\t\t\tthumb.classList.remove('panel-fullscreen');\n\n\t\t\t\t\t\t$scope.chart.legend = false;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t    $scope.$emit('fullscreen_toggle', []);\n\t\t\t\t};\n\t\t\t\t$scope.chart = {};\n\t\t\t\t$scope.chart.options = {};\n\n\t\t\t\t$scope.$on('create', function (event, chart) {\n\t\t\t        $scope.chart = chart;\n\t\t\t\t\t$scope.chart.options.pointDotRadius = 0;\n\t\t\t\t\t$scope.chart.legend = false;\n\t\t\t\t\t$scope.chart.options.scaleBeginAtZero = false;\n\t\t\t\t\t//console.log($scope.chart);\n\t\t\t\t\t//$scope.chart.options.showTooltips = false;\n\t\t\t    });\n\t\t\t\t\n\t\t\t\t$scope.$on('fullscreen_toggle', function (e, d) {\n\t\t\t\t\twindow.dispatchEvent(new Event('resize'));\n\t\t\t    });\n\t\t\t\t\n\t\t\t\t$scope.onClick = function (points, evt) {\n\t\t\t\t    console.log(points, evt);\n\t\t\t\t};\t\t\t\t\n\t\t\t}],\n\t\t\tcontrollerAs: 'graphsCtrl'\n        };\n    });\t\t\n\t\n\n})();","(function() {\n    angular.module('activationsTable', ['timeMathFltr','ngTable','toaster'])\n\n    .directive('activationsTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/activationsTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location','$rootScope', function($scope, Data, NgTableParams, $filter, toaster, $location, $rootScope) {\n\t\t\t\t$scope.activations = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.appList = function(){\n\t\t\t\t\t//debugger;\n\t\t\t\t\treturn $rootScope.appList;\n\t\t\t\t}\n\t\t\t\t$scope.getAppName = function(appID){\n\t\t\t\t\t//if(appID != 1) console.log(\"appID: \"+appID);\n\t\t\t\t\treturn $scope.appList()[appID].title;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tthis.status = [\n\t\t\t\t\t{'id':'', 'title':''},\n\t\t\t\t\t{'id':'failure', 'title':'failure'},\n\t\t\t\t\t{'id':'success', 'title':'success'},\n\t\t\t\t];\n\t\t\t\t\n\n\t\t\t\t$scope.status = function($scope){\n\t\t\t\t\treturn self.status;\n\t\t\t\t};\n\n\t\t\t\t\n\n\t\t\t\t$scope.filters = {\n\t\t            app_id: '',\n\t\t\t\t\temail: '',\n\t\t\t\t\tdt: '',\n\t\t\t\t\tip: '',\n\t\t\t\t\trequest_location: '',\n\t\t\t\t\tversion_tool: '',\n\t\t\t\t\tversion_payload: '',\n\t\t\t\t\tactivation_status: ''\n\t        \t};\n\t\t\t\t\n\t\t\t\t$scope.prepareTooltips = function(){\n\t\t\t\t\t$('[data-toggle=\"tooltip\"]').tooltip();\n\t\t\t\t\t//need to work on these TODO\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: {  \n\t\t\t            app_id: '',\n\t\t\t\t\t\temail: '',\n\t\t\t\t\t\tdt: 'DESC',\n\t\t\t\t\t\tip: '',\n\t\t\t\t\t\trequest_location: '',\n\t\t\t\t\t\tversion_tool: '',\n\t\t\t\t\t\tversion_payload: '',\n\t\t\t\t\t\tactivation_status: ''\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getActivations', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t        //Data.toast(results);\n\t\t\t\t\t\t\t$scope.activations = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.activations, params.filter()) : $scope.activations;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('appsTable', ['ui.bootstrap','timeMathFltr','appViewCtrl','twoButtonBar'])//'ngAnimate', \n\n    .directive('appsTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/appsTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','$uibModal', '$rootScope', function($scope, Data, $uibModal, $rootScope) {\n\t\t\t\t$scope.getApplications = function(){\n\t\t\t\t\tData.post('getApplications', {})\n\t\t\t\t\t.then(function (results) {\t\t\t\t\t\n\t\t\t\t\t\t$scope.apps = JSON.parse(results.message);\n\t\t\t\t\t\t$scope.totalApps = results.total;\n\t\t\t\t\t\t$scope.available_engines = results.available_engines;\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t$scope.temp = 1;\n\t\t\t\t$scope.openApp = function(appID){\n\t\t\t\t\tif(appID)\n\t\t\t\t\t\tvar columns = $scope.apps[appID].columns;\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar columns = {};\n\t\t\t\t\t\tappID = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\t\tanimation: true,\n\t\t\t\t\t\ttemplateUrl: 'partials/pages/tables/sub/appView.html',\n\t\t\t\t\t\tcontroller: 'appViewCtrl',\n\t\t\t\t\t\tsize: 'lg',\n            \t\t\twindowClass: 'app-modal-window',\n\t\t\t\t\t\tresolve: {\n\t\t\t\t\t\t\tapp: function () {\n\t\t\t\t\t\t\t\treturn columns;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tappID: function (){\n\t\t\t\t\t\t\t\treturn appID;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tavailable_engines: function (){\n\t\t\t\t\t\t\t\treturn $scope.available_engines;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\t\t\t//$scope.selected = selectedItem;\n\t\t\t\t\t\t//console.log(\"Caught \"+result.action+\" action.\");\n\t\t\t\t\t\tif(result.action === 'save'){\n\t\t\t\t\t\t\tvar resultData = result.data;\n\t\t\t\t\t\t\tvar originalData = $scope.apps[resultData.id].columns;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Loop to create new object, which'll be sent to server as an update request. Only want to send changed columns to server, not unchanged data.\n\t\t\t\t\t\t\tvar updateObject = {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t};\n\t\t\t\t\t        for (var item in originalData) {\n\t\t\t\t\t\t\t\t// Find mismatching data that needs to be sent to server\n\t\t\t\t\t\t\t\tif(originalData[item] !== result.data[item]){\n\t\t\t\t\t\t\t\t\t//console.log(item+\" was changed from \"+originalData[item]+ \" to \" +result.data[item]);\n\t\t\t\t\t\t\t\t\tupdateObject[item] = result.data[item];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t        };\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Send post request to server, to update all objects in \"updateObject\" on the DB\n\t\t\t\t\t\t\tData.post('application', {\n\t\t\t\t\t\t\t\tupdateObject: updateObject,\n\t\t\t\t\t\t\t\tupdateID: resultData.id,\n\t\t\t\t\t\t\t\taction: 'update'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(function (results) {\t\n\t\t\t\t\t\t\t\t//debugger;\t\t\t\t\n\t\t\t\t\t\t\t\tvar message = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// update local reference of object to update view\n\t\t\t\t\t\t\t\t$scope.apps[message.id].columns = message.columns;\n\t\t\t\t\t\t\t\tData.toastMsg(\"success\",\"App Updated\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\telse if(result.action === 'saveNew'){\n\t\t\t\t\t\t\t// Send post request to server, to update all objects in \"updateObject\" on the DB\n\t\t\t\t\t\t\tData.post('application', {\n\t\t\t\t\t\t\t\tnewAppDetails: result.data,\n\t\t\t\t\t\t\t\taction: 'new'\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(function (results) {\t\n\t\t\t\t\t\t\t\tvar message = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// update local reference of object to update view\n\t\t\t\t\t\t\t\t$scope.apps[message.id] = message\n\t\t\t\t\t\t\t\t$scope.apps[message.id].columns = message.columns;\n\t\t\t\t\t\t\t\tData.toastMsg(\"success\",\"New App Created\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tconsole.log('Modal dismissed at: ' + new Date());\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t\n\t\t\t}],\n\t\t\tcontrollerAs: 'appsTable'\n        };\n    });\n})();","(function() {\n    angular.module('logsCIDTable', ['timeMathFltr','ngTable','toaster'])\n\n    .directive('logsCidTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/logsCIDTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', function($scope, Data, NgTableParams, $filter, toaster, $location) {\n\t\t\t\t$scope.logs = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t$scope.tableAlias = \"logs_CID\";\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.actionTypes = {};\n\t\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            email: '',\n\t\t\t\t\tsyskey: '',\n\t\t\t\t\tIP: '',\n\t\t\t\t\tdt: ''\n\t\t\t\t};\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: { \n\t\t\t            email: '',\n\t\t\t\t\t\tsyskey: '',\n\t\t\t\t\t\tIP: '',\n\t\t\t\t\t\tdt: 'desc'\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getCIDLogs', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.logs = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.logs, params.filter()) : $scope.logs;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n\n})();","(function() {\n    angular.module('logsDeactTable', ['timeMathFltr','ngTable','toaster'])\n\n    .directive('logsDeactTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/logsDeactTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', function($scope, Data, NgTableParams, $filter, toaster, $location) {\n\t\t\t\t$scope.logs = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t$scope.tableAlias = \"logs_deact\";\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.actionTypes = {};\n\t\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            email: '',\n\t\t\t\t\tsyskey: '',\n\t\t\t\t\tIP: '',\n\t\t\t\t\tdt: ''\n\t        \t};\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: { \n\t\t\t            email: '',\n\t\t\t\t\t\tsyskey: '',\n\t\t\t\t\t\tIP: '',\n\t\t\t\t\t\tdt: 'desc'\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getDeactLogs', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.logs = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.logs, params.filter()) : $scope.logs;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n\n})();","(function() {\n    angular.module('logsFailureTable', ['timeMathFltr','ngTable','toaster'])\n\n    .directive('logsFailureTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/logsFailureTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', function($scope, Data, NgTableParams, $filter, toaster, $location) {\n\t\t\t\t$scope.logs = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t$scope.tableAlias = \"logs_fail\";\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.actionTypes = {};\n\t\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            email: '',\n\t\t\t\t\tactcode: '',\n\t\t\t\t\tIP: '',\n\t\t\t\t\treason: '',\n\t\t\t\t\tdt: ''\n\t        \t};\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: { \n\t\t\t            email: '',\n\t\t\t\t\t\tactcode: '',\n\t\t\t\t\t\tIP: '',\n\t\t\t\t\t\treason: '',\n\t\t\t\t\t\tdt: 'desc'\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getFailLogs', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.logs = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.logs, params.filter()) : $scope.logs;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('logsSystemTable', ['timeMathFltr','ngTable','toaster'])\n\n    .directive('logsSystemTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/logsSystemTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', function($scope, Data, NgTableParams, $filter, toaster, $location) {\n\t\t\t\t$scope.logs = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t$scope.tableAlias = \"logs_system\";\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.actionTypes = {};\n\t\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            email: '',\n\t\t\t\t\taction: '',\n\t\t\t\t\treason: '',\n\t\t\t\t\tdt: '',\n\t\t\t\t\tnew: ''\n\t        \t};\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: { \n\t\t\t            email: '',\n\t\t\t\t\t\taction: '',\n\t\t\t\t\t\treason: '',\n\t\t\t\t\t\tdt: 'desc',\n\t\t\t\t\t\tnew: ''\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getSystemLogs', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.logs = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\n\t\t\t\t\t\t\t$scope.actionTypes = JSON.parse(results.actions);\n\t\t\t\t\t\t\t$scope.actionTypes.splice(0, 0, {\n\t\t\t\t\t\t\t\tid: '', title: ''\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.logs, params.filter()) : $scope.logs;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('membersTable', ['timeMathFltr','ngTable','toaster','memberViewCtrl'])\n\n    .directive('membersTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/membersTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', '$uibModal', 'memberFuncs', function($scope, Data, NgTableParams, $filter, toaster, $location, $uibModal, memberFuncs) {\n\t\t\t\t$scope.members = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\n\t\t\t\t$scope.filters = {\n\t\t            member_name: '',\n\t\t\t\t\tmember_email: '',\n\t\t\t\t\tlast_purchase: '',\n\t\t\t\t\texpiry_date: '',\n\t\t\t\t\tdeactivated: '',\n\t\t\t\t\tblacklisted: ''\n\t        \t};\n\t\t\t\t\n\t\t\t\t$scope.filterDeactivated = function(){\n\t\t\t\t\tif(!$scope.filters.deactivated)\n\t\t\t\t\t\t$scope.filters.deactivated = '1';\n\t\t\t\t\telse\n\t\t\t\t\t\t$scope.filters.deactivated = '';\n\t\t\t\t\t\n\t\t\t\t\tif($scope.filters.blacklisted)\n\t\t\t\t\t\t$scope.filters.blacklisted = '';\n\t\t\t\t\t\n\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.filterBlacklisted = function(){\n\t\t\t\t\tif(!$scope.filters.blacklisted)\n\t\t\t\t\t\t$scope.filters.blacklisted = '1';\n\t\t\t\t\telse\n\t\t\t\t\t\t$scope.filters.blacklisted = '';\n\t\t\t\t\t\n\t\t\t\t\tif($scope.filters.deactivated)\n\t\t\t\t\t\t$scope.filters.deactivated = '';\n\n\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.filterReset = function(){\n\t\t\t\t\t$scope.filters.member_name = '';\n\t\t\t\t\t$scope.filters.member_email = '';\n\t\t\t\t\t$scope.filters.last_purchase = '';\n\t\t\t\t\t$scope.filters.expiry_date = '';\n\t\t\t\t\t$scope.filters.deactivated = '';\n\t\t\t\t\t$scope.filters.blacklisted = '';\n\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$scope.isExpired = function(member){\n\n\t\t\t\t\tvar expDate = new Date(Date.parse(member.expiry_date));\n\t\t\t\t\tvar todayDate = new Date();\n\t\t\t\t\t\n\t\t\t        if(expDate <= todayDate)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: {  \n\t\t\t            member_name: '',\n\t\t\t\t\t\tmember_email: '',\n\t\t\t\t\t\tlast_purchase: '',\n\t\t\t\t\t\texpiry_date: '',\n\t\t\t\t\t\tactivation_count: '',\n\t\t\t\t\t\textension_count: 'desc'\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t//$scope.updateParamsSorting(params.sorting());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getMembers', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.members = JSON.parse(results.message);\n\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.members, params.filter()) : $scope.members;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t\t\n\t\t\t\t// function to open member in modal\n\t\t\t\t$scope.openMember = function(memberID){\n\t\t\t\t\tmemberFuncs.viewMember(memberID,$scope.members);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// function to open order in modal\n\t\t\t\t$scope.openOrder = function(orderID){\n\t\t\t\t\tordesadfrFuncs.viewOrder(orderID,$scope.orders);\n\t\t\t\t};\n\t\t\t\t// end function to open order in modal\n\t\t\t\t\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('ordersTable', ['timeMathFltr','ngTable','toaster','twoButtonBar','orderFuncs'])\n\n    .directive('ordersTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/ordersTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location', '$rootScope', '$uibModal','orderFuncs', function($scope, Data, NgTableParams, $filter, toaster, $location, $rootScope, $uibModal, orderFuncs ) {\n\t\t\t\t$scope.orders = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\tthis.orderTypes = [\n\t\t\t\t\t{'id':'' , 'title':''},\n\t\t\t\t\t{'id':'PayPal' , 'title':'PayPal'},\n\t\t\t\t\t{'id':'Manual' , 'title':'Manual'},\n\t\t\t\t];\n\t\t\t\t$scope.getOrderTypes = function($scope){\n\t\t\t\t\treturn self.orderTypes;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.appList = function(){\n\t\t\t\t\t//debugger;\n\t\t\t\t\treturn $rootScope.appList;\n\t\t\t\t}\n\t\t\t\t$scope.getAppName = function(appID){\n\t\t\t\t\t//if(appID != 1) console.log(\"appID: \"+appID);\n\t\t\t\t\treturn $scope.appList()[appID].title;\n\t\t\t\t};\n\t\t\t\t\n\n\t\t\t\t$scope.filters = {\n\t\t            app_id: '',\n\t\t\t\t\tlast_name: '',\n\t\t\t\t\tpayer_email: '',\n\t\t\t\t\ttype: '',\n\t\t\t\t\tdt: ''\n\t        \t};\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: { \n\t\t\t\t\t\titem_name: '', \n\t\t\t\t\t\tlast_name: '', \n\t\t\t\t\t\tpayer_email: '', \n\t\t\t\t\t\ttype: '', \n\t\t\t\t\t\tdt: 'desc', \n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t//$scope.updateParamsSorting(params.sorting());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getOrders', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t        //Data.toast(results);\n\t\t\t\t\t\t\t$scope.orders = JSON.parse(results.message);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.orders, params.filter()) : $scope.orders;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t\t\n\t\t\t\t// function to open order in modal\n\t\t\t\t$scope.openOrder = function(orderID){\n\t\t\t\t\torderFuncs.viewOrder(orderID,$scope.orders);\n\t\t\t\t}\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('versionsAppTable', ['timeMathFltr','ngTable','toaster','versionFuncs'])\n\n    .directive('versionsAppTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/versionsAppTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location','$rootScope','versionFuncs', function($scope, Data, NgTableParams, $filter, toaster, $location, $rootScope, versionFuncs) {\n\t\t\t\t$scope.versions = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.appList = function(){\n\t\t\t\t\t//debugger;\n\t\t\t\t\treturn $rootScope.appList;\n\t\t\t\t};\n\t\t\t\t$scope.getAppName = function(appID){\n\t\t\t\t\treturn $scope.appList()[appID].title;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.viewVersion = function(hash_id,type){\n\t\t\t\t\tversionFuncs.viewAppVersion(hash_id, type, $scope.versions, $scope.appList())\n\t\t\t\t\t.then(function (results) {\t\n\t\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            version: '',\n\t\t\t\t\ttool_or_payload: '',\n\t\t\t\t\thash_string: '',\n\t\t\t\t\tdate_added: '',\n\t\t\t\t\tgame_version: ''\n\t        \t};\n\t\t\t\t\n\t\t\t\t$scope.prepareTooltips = function(){\n\t\t\t\t\t$('[data-toggle=\"tooltip\"]').tooltip();\n\t\t\t\t\t//need to work on these TODO\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: {  \n\t\t\t            version: '',\n\t\t\t\t\t\ttool_or_payload: '',\n\t\t\t\t\t\thash_string: '',\n\t\t\t\t\t\tdate_added: 'desc',\n\t\t\t\t\t\tgame_version: ''\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getVersions', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t\tversionType: 'app',\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t        //Data.toast(results);\n\t\t\t\t\t\t\t$scope.versions = results.message.app;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.versions, params.filter()) : $scope.versions;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('versionsGameTable', ['timeMathFltr','ngTable','toaster','versionFuncs'])\n\n    .directive('versionsGameTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/versionsGameTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location','$rootScope','versionFuncs', function($scope, Data, NgTableParams, $filter, toaster, $location, $rootScope, versionFuncs) {\n\t\t\t\t$scope.versions = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.appList = function(){\n\t\t\t\t\t//debugger;\n\t\t\t\t\treturn $rootScope.appList;\n\t\t\t\t};\n\t\t\t\t$scope.getAppName = function(appID){\n\t\t\t\t\treturn $scope.appList()[appID].title;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.viewVersion = function(game_id){\n\t\t\t\t\tversionFuncs.viewGameVersion(game_id, $scope.versions, $scope.appList())\n\t\t\t\t\t.then(function (results) {\t\n\t\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t            game_name: '',\n\t\t\t\t\tvers_string: '',\n\t\t\t\t\tvers_bytes: ''/*,\n\t\t\t\t\tis_supported: '',\n\t\t\t\t\tnot_supported_text: '',\n\t\t\t\t\tshould_update: '',\n\t\t\t\t\tshould_update_text: '',\n\t\t\t\t\tshould_redirect: '',\n\t\t\t\t\tshould_update_URL: '',\n\t\t\t\t\tgame_vers_comments: ''*/\n\t        \t};\n\t\t\t\t\n\t\t\t\t$scope.prepareTooltips = function(){\n\t\t\t\t\t$('[data-toggle=\"tooltip\"]').tooltip();\n\t\t\t\t\t//need to work on these TODO\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: {  \n\t\t\t            game_name: 'desc',\n\t\t\t\t\t\tvers_string: '',\n\t\t\t\t\t\tvers_bytes: '',\n\t\t\t\t\t\tis_supported: '',\n\t\t\t\t\t\tnot_supported_text: '',\n\t\t\t\t\t\tshould_update: '',\n\t\t\t\t\t\tshould_update_text: '',\n\t\t\t\t\t\tshould_redirect: '',\n\t\t\t\t\t\tshould_update_URL: '',\n\t\t\t\t\t\tgame_vers_comments: ''\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getVersions', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t\tversionType: 'game',\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.versions = results.message.game;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.versions, params.filter()) : $scope.versions;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('versionsUnknownTable', ['timeMathFltr','ngTable','toaster','versionFuncs'])\n\n    .directive('versionsUnknownTable', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/versionsUnknownTable.html',\n\t\t\tscope:{},\n\t\t\tcontroller: ['$scope','Data','NgTableParams','$filter', 'toaster','$location','versionFuncs', function($scope, Data, NgTableParams, $filter, toaster, $location, versionFuncs) {\n\t\t\t\t$scope.versions = {};\n\t\t\t\t$scope.total = {};\n\t\t\t\t\n\t\t\t\tvar self = this;\n\t\t\t\t\n\t\t\t\t$scope.appList = function(){\n\t\t\t\t\t//debugger;\n\t\t\t\t\treturn $rootScope.appList;\n\t\t\t\t};\n\t\t\t\t$scope.getAppName = function(appID){\n\t\t\t\t\treturn $scope.appList()[appID].title;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.viewVersion = function(game_id){\n\t\t\t\t\tversionFuncs.viewUnknownVersion(game_id, $scope.versions)\n\t\t\t\t\t.then(function (results) {\t\n\t\t\t\t\t\t$scope.tableParams.reload();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t$scope.filters = {\n\t\t\t\t\tvers_bytes: '',\n\t\t\t\t\tdate_added: '',\n\t\t\t\t\tlast_use_attempt: '',\n\t\t\t\t\tuse_count: '',\n\t\t\t\t\tsubmitter_email: '',\n\t        \t};\n\t\t\t\t\n\t\t\t\t$scope.prepareTooltips = function(){\n\t\t\t\t\t$('[data-toggle=\"tooltip\"]').tooltip();\n\t\t\t\t\t//need to work on these TODO\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar queryStrings = $location.search();\n\n\t\t\t\t// restore filters\n\t\t        for (var filter in $scope.filters) {\t\t\t\t\t\n\t\t            if (filter in queryStrings) {\n\t\t                $scope.filters[filter] = queryStrings[filter];\n\t\t            }\n\t\t        };\n\t\t\t\t\n\t\t\t\t// restore URL\n\t\t\t\t$scope.pagination = {};\n\t\t\t\t$scope.pagination.currentPage = 1;\n\t\t\t\t$scope.pagination.perPage = 20;\n\t\t\t\t\n\t\t\t\tif(queryStrings.page){\n\t\t\t\t\t$scope.pagination.currentPage = queryStrings.page;\n\t\t\t\t}\n\t\t\t\tif(queryStrings.n){\n\t\t\t\t\t$scope.pagination.perPage = queryStrings.n;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.updateParamsPage = function(params){\n\t                $location.search('page', params);\n\t\t\t\t};\n\t\t\t\t$scope.updateParamsCount = function(params){\n\t                $location.search('n', params);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Update query string with new params\n\t\t\t\t$scope.updateParamsFilters = function(params){\n\t\t\t\t\tfor(param in params){ \n\t\t\t\t\t\tif(params.hasOwnProperty(param) && params[param]){\n\t\t\t                $location.search(param, params[param]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t                $location.search(param, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// load table\n\t\t\t    $scope.tableParams = new NgTableParams({\n\t\t\t        page: $scope.pagination.currentPage,            // show first page\n\t\t\t        count: $scope.pagination.perPage,           // count per page\n\t\t\t        sorting: {  \n\t\t\t\t\t\tvers_bytes: '',\n\t\t\t\t\t\tdate_added: '',\n\t\t\t\t\t\tlast_use_attempt: 'desc',\n\t\t\t\t\t\tuse_count: '',\n\t\t\t\t\t\tsubmitter_email: '',\n\t\t\t\t\t},\n\t\t\t        filter: $scope.filters,\n\t\t\t    }, \n\t\t\t\t{\n\t\t\t        filterSwitch: true,\n\t\t\t        total: 0, // length of data\n\t\t\t\t\tfilterOptions: {\n\t\t\t\t\t\tfilterDelay: 200\n\t\t\t\t\t},\n\t\t\t        getData: function($defer, params) {\n\t\t\t\t\t\t//toaster.popSimple(\"warning\",\"\",\"Sorting still doesn't work!\",4000);\n\n\t\t\t\t\t\tvar form = {\n\t\t\t\t\t\t\toffset: (params.page() - 1) * params.count(),\n\t\t\t\t\t\t\tlimit: params.count(),\n\t\t\t\t\t\t\tfilter:params.filter(),\n\t\t\t\t\t\t\tsorting:params.sorting()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.updateParamsFilters(params.filter());\n\t\t\t\t\t\t$scope.updateParamsPage(params.page());\n\t\t\t\t\t\t$scope.updateParamsCount(params.count());\n\t\t\t\t\t\t\n\t\t\t\t\t\tData.post('getVersions', {\n\t\t\t\t\t\t\tform: form,\n\t\t\t\t\t\t\tversionType: 'unknown',\n\t\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\t\t$scope.versions = results.message.unknown;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(results.total != $scope.total)\n\t\t\t\t\t\t\t\ttoaster.popSimple(\"success\",\"\",\"\"+results.total+\" results\",2000);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.total = results.total;\n\t\t\t\t\t\t\t$scope.isFiltered = results.filtered;\n\t\t\t\t\t\t\t\n\t\t\t\t            var filteredData = params.filter() ? $filter('filter')($scope.versions, params.filter()) : $scope.versions;\n\n\t\t\t\t            params.total($scope.total);\n\t\t\t\t\t\t\t$defer.resolve(filteredData);\n\t\t\t\t\t\t});\n\t\t\t        }\n\t\t\t    });\n\t\t\t}],\n\t\t\tcontrollerAs: 'ordersCtrl'\n        };\n    });\n})();","(function() {\n    angular.module('threeButtonBar', [])\n\n    .directive('threeButtonBar', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/buttons/threeButtonBar.html',//make a 2 button version for other ones\n            replace: true,\n\t\t\tscope: {\n\t\t\t\tshowFilter: '=',\n\t\t\t\ttableParams: '=',\n\t\t\t\ttableAlias: '='\n\t\t\t},\n\t\t\tcontroller: ['$scope','Data', function($scope, Data) {\n\t\t\t\t$scope.markAsRead = function(myTableAlias){\n\t\t\t\t\t//console.log(\"child: Submit task to mark all as read.\");\n\t\t\t\t\tvar form = {\n\t\t\t\t\t\tparams: myTableAlias\n\t\t\t\t\t};\n\t\t\t\t\tData.post('markAllAsRead', {\n\t\t\t\t\t\tform: form,\n\t\t\t\t\t}).then(function (results) {\n\t\t\t\t\t\tif(results.message){\n\t\t\t\t\t\t\t//console.log(\"Successfully marked all as read, need to reload data:\");\n\t\t\t\t\t\t\t$scope.$parent.tableParams.reload();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\ttoaster.popSimple(\"error\",\"markAllAsRead error\",\"server error\",2000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}],\n\t\t\tcontrollerAs: 'threeButtonCtrl'\n        };\n    });\n\n})();","(function() {\n    angular.module('twoButtonBar', [])\n\n    .directive('twoButtonBar', function() {\n        return {\n            restrict: 'E',\n            templateUrl: 'partials/pages/tables/buttons/twoButtonBar.html',\n            replace: true,\n\t\t\tscope: {\n\t\t\t\tshowFilter: '=',\n\t\t\t\ttableParams: '='\n\t\t\t},\n\t\t\tcontroller: function(){},\n\t\t\tcontrollerAs: 'twoButtonCtlr'\n        };\n    });\n\n})();"],"sourceRoot":"/source/"}